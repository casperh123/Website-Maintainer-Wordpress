@using WebsiteMaintainer.Core.Entities
@using WebsiteMaintainer.Infrastructure.Services
@using WebsiteMaintainer.Web.Services
@using WebsiteMaintainer.Web.Components.Plugin
@using WebsiteMaintainer.Web.Components.Maintenance
@using WebsiteMaintainer.Web.Components.Details
@inject IEnhanceService EnhanceService;
@inject IUserService UserService;

<RadzenCard>
    <RadzenRow JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
        <WebsiteHeader Domain="@Website.Domain" Kind="@Website.Kind"/>
        <RadzenRow>
            <RadzenColumn JustifyContent="JustifyContent.Start">
                <PluginsDetails Plugins="Plugins"/>
            </RadzenColumn>
            <RadzenRow AlignItems="AlignItems.Center">
                <MaintenanceSelect Maintenance="Website.MaintenanceType" MaintenanceChanged="MaintenanceChanged" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Click="@RemoveWebsite"/>
            </RadzenRow>
            <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                @if (ShowMore)
                {
                    <RadzenButton Click="_toggle" Icon="keyboard_arrow_up"/>
                }
                else
                {
                    <RadzenButton Click="_toggle" Icon="keyboard_arrow_down"/>
                }
            </RadzenStack>
        </RadzenRow>
    </RadzenRow>
    @if (ShowMore)
    {
        <WebsiteDetails Website="Website" Plugins="Plugins"/>
    }
</RadzenCard>

@code {
    
    [Parameter]
    public Website Website { get; set; }
    
    [Parameter]
    public EventCallback<Website> WebsiteChanged { get; set; }

    private List<Plugin> Plugins { get; set; } = [];
    private int TotalPlugins { set; get; }
    private int UpdateablePlugins { get; set; }
    private bool ShowMore { get; set; }
    private string ErrorMessage { get; set; }

    protected override async void OnInitialized()
    {
        ErrorMessage = string.Empty;
        ApplicationUser user = await UserService.GetCurrentUserAsync();

        try
        {
            Plugins = await EnhanceService.GetPlugins(user, Website);
        }
        catch (Exception e)
        {
            ErrorMessage = "Unable to retrieve plugins";
        }

        UpdateablePlugins = Plugins?.Count(plugin => plugin.UpdateAvailable) ?? 0;
        TotalPlugins = Plugins?.Count ?? 0;
        await InvokeAsync(StateHasChanged);
    }

    public async Task MaintenanceChanged(MaintenanceType newValue)
    {
        Website.MaintenanceType = newValue;
        await WebsiteChanged.InvokeAsync(Website);
    }

    private async Task RemoveWebsite()
    {
        Website.MaintenanceType = MaintenanceType.None;
        await WebsiteChanged.InvokeAsync(Website);
    }

    private void _toggle()
    {
        ShowMore = !ShowMore;
    }
}