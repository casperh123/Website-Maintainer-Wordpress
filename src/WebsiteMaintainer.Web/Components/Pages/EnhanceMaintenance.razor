@page "/enhance-maintenance"
@using WebsiteMaintainer.Core.Entities
@using Microsoft.AspNetCore.Authorization
@using WebsiteMaintainer.Infrastructure.Services
@using WebsiteMaintainer.Web.Components.Button
@using WebsiteMaintainer.Web.Services
@using WebsiteMaintainer.Web.Components.Website.Card
@using WebsiteMaintainer.Web.Components.Website.WebsiteSelector
@inject IWebsiteService WebsiteService
@inject IEnhanceService EnhanceService
@inject IUserService UserService

@attribute [Authorize]

<RadzenStack Gap="20px">
    <RadzenText TextStyle="TextStyle.H1">Enhance Websites</RadzenText>
    <RadzenText TextStyle="TextStyle.H2" >
        <RadzenHeading >Websites</RadzenHeading>
        <ToggleButton @bind-Value="_addWebsites" Disabled="!_websites.Any()" OnText="Close" OffText="Add Websites"></ToggleButton>
    </RadzenText>
    
    @if (_addWebsites)
    {
        <EnhanceSiteSelector Websites="_websites" EnhanceWebsites="_enhanceWebsites" WebsitesChanged="WebsitesChanged"/>
    }
    
    <RadzenStack Gap="10px" Orientation="Orientation.Vertical">
        @if (_websites == null)
        {
            <p>Loading websites...</p>
        }
        else if(!_websites.Any())
        {
            <p>No websites are saved</p>
        }
        else
        {
            @foreach (Website website in _websites)
            {
                <WebsiteCard Website="@website" WebsiteChanged="WebsiteAdded"/>
            }
        }
    </RadzenStack>
</RadzenStack>

@code {
    private List<Website> _websites;
    private List<Website> _enhanceWebsites;
    private bool _addWebsites;
    
    protected override async Task OnInitializedAsync()
    {
        ApplicationUser user = await UserService.GetCurrentUserAsync();
        _websites = await WebsiteService.GetWebsitesAsync();
        _enhanceWebsites = await EnhanceService.GetWebsites(user);
        _addWebsites = !_websites.Any();
    }

    private async Task WebsitesChanged(List<Website> websites)
    {
        _websites = await WebsiteService.SynchronizeMaintainedWebsitesAsync(websites);
    }

    private async Task WebsiteAdded(Website website)
    {
        _websites = await WebsiteService.SynchronizeMaintainedWebsitesAsync(_websites);
    }
}