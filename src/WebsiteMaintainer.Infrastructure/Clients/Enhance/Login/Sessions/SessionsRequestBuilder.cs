// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Login.Sessions.Current;
using Enhance.Client.Login.Sessions.Item;
using Enhance.Client.Login.Sessions.Sso;
using Enhance.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.Login.Sessions
{
    /// <summary>
    /// Builds and executes requests for operations under \login\sessions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class SessionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The current property</summary>
        public global::Enhance.Client.Login.Sessions.Current.CurrentRequestBuilder Current
        {
            get => new global::Enhance.Client.Login.Sessions.Current.CurrentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sso property</summary>
        public global::Enhance.Client.Login.Sessions.Sso.SsoRequestBuilder Sso
        {
            get => new global::Enhance.Client.Login.Sessions.Sso.SsoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Enhance.Client.login.sessions.item collection</summary>
        /// <param name="position">The id of the login session.</param>
        /// <returns>A <see cref="global::Enhance.Client.Login.Sessions.Item.WithSession_ItemRequestBuilder"/></returns>
        public global::Enhance.Client.Login.Sessions.Item.WithSession_ItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("session_id", position);
                return new global::Enhance.Client.Login.Sessions.Item.WithSession_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Enhance.Client.login.sessions.item collection</summary>
        /// <param name="position">The id of the login session.</param>
        /// <returns>A <see cref="global::Enhance.Client.Login.Sessions.Item.WithSession_ItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Enhance.Client.Login.Sessions.Item.WithSession_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("session_id", position);
                return new global::Enhance.Client.Login.Sessions.Item.WithSession_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Login.Sessions.SessionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SessionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/login/sessions{?realmId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Login.Sessions.SessionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SessionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/login/sessions{?realmId*}", rawUrl)
        {
        }
        /// <summary>
        /// Delete sessions
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get all login sessions
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.SessionsFullListing"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Models.SessionsFullListing?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Models.SessionsFullListing> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Models.SessionsFullListing>(requestInfo, global::Enhance.Client.Models.SessionsFullListing.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new session for the login in a specific login realm.By default, the realm in which to look up a given login is dictated by the domain on which the request is made.  If it matches a mapped to a ControlPanel website belonging to an MO or a reseller then that MO or reseller is used as the relam from which to select the login.  If the login exists directly as a member of the chosen realm then that login will be selected in preference to any which exists within the realm itself.The realm derived from the control panel domain can be overridden with the realmId parameter to specify a particular reseller or the MO.The authentication result is a JWT session token and a list detailing the organizations in which login is a member.In case of 2FA, the authentication result is a JWT session token with empty body and 201 http status code.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.LoginMemberships"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Models.LoginMemberships?> PostAsync(global::Enhance.Client.Models.LoginCreds body, Action<RequestConfiguration<global::Enhance.Client.Login.Sessions.SessionsRequestBuilder.SessionsRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Models.LoginMemberships> PostAsync(global::Enhance.Client.Models.LoginCreds body, Action<RequestConfiguration<global::Enhance.Client.Login.Sessions.SessionsRequestBuilder.SessionsRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Models.LoginMemberships>(requestInfo, global::Enhance.Client.Models.LoginMemberships.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete sessions
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Get all login sessions
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new session for the login in a specific login realm.By default, the realm in which to look up a given login is dictated by the domain on which the request is made.  If it matches a mapped to a ControlPanel website belonging to an MO or a reseller then that MO or reseller is used as the relam from which to select the login.  If the login exists directly as a member of the chosen realm then that login will be selected in preference to any which exists within the realm itself.The realm derived from the control panel domain can be overridden with the realmId parameter to specify a particular reseller or the MO.The authentication result is a JWT session token and a list detailing the organizations in which login is a member.In case of 2FA, the authentication result is a JWT session token with empty body and 201 http status code.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.LoginCreds body, Action<RequestConfiguration<global::Enhance.Client.Login.Sessions.SessionsRequestBuilder.SessionsRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.LoginCreds body, Action<RequestConfiguration<global::Enhance.Client.Login.Sessions.SessionsRequestBuilder.SessionsRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Login.Sessions.SessionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.Login.Sessions.SessionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.Login.Sessions.SessionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class SessionsRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class SessionsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Creates a new session for the login in a specific login realm.By default, the realm in which to look up a given login is dictated by the domain on which the request is made.  If it matches a mapped to a ControlPanel website belonging to an MO or a reseller then that MO or reseller is used as the relam from which to select the login.  If the login exists directly as a member of the chosen realm then that login will be selected in preference to any which exists within the realm itself.The realm derived from the control panel domain can be overridden with the realmId parameter to specify a particular reseller or the MO.The authentication result is a JWT session token and a list detailing the organizations in which login is a member.In case of 2FA, the authentication result is a JWT session token with empty body and 201 http status code.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class SessionsRequestBuilderPostQueryParameters 
        {
            /// <summary>If set with the given realm&apos;s id (the parent id of an organization), then the login is authenticated in this realm. See the endpoint description for more info.</summary>
            [QueryParameter("realmId")]
            public Guid? RealmId { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class SessionsRequestBuilderPostRequestConfiguration : RequestConfiguration<global::Enhance.Client.Login.Sessions.SessionsRequestBuilder.SessionsRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
