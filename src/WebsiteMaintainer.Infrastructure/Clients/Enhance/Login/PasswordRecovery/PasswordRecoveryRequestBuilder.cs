// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Login.PasswordRecovery.Validate;
using Enhance.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.Login.PasswordRecovery
{
    /// <summary>
    /// Builds and executes requests for operations under \login\password-recovery
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class PasswordRecoveryRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The validate property</summary>
        public global::Enhance.Client.Login.PasswordRecovery.Validate.ValidateRequestBuilder Validate
        {
            get => new global::Enhance.Client.Login.PasswordRecovery.Validate.ValidateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PasswordRecoveryRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/login/password-recovery?secret={secret}{&realmId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PasswordRecoveryRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/login/password-recovery?secret={secret}{&realmId*}", rawUrl)
        {
        }
        /// <summary>
        /// Finishes the password recovery for the recovery key.This operation only succeeds if the key hasn&apos;t expired. If it has, the user must initiate a new password recovery.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PostAsync(global::Enhance.Client.Models.NewPassword body, Action<RequestConfiguration<global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder.PasswordRecoveryRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PostAsync(global::Enhance.Client.Models.NewPassword body, Action<RequestConfiguration<global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder.PasswordRecoveryRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Initiates a new password recovery for the given email address, or fails silently (returning a `200 Ok`) if no login corresponded to the email.Note that only logins who are registered may initiate a password recovery. Users who were invited by an org member and haven&apos;t finished their signup may not start a recovery.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PutAsync(global::Enhance.Client.Models.EmailAddress body, Action<RequestConfiguration<global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder.PasswordRecoveryRequestBuilderPutQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PutAsync(global::Enhance.Client.Models.EmailAddress body, Action<RequestConfiguration<global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder.PasswordRecoveryRequestBuilderPutQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Finishes the password recovery for the recovery key.This operation only succeeds if the key hasn&apos;t expired. If it has, the user must initiate a new password recovery.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.NewPassword body, Action<RequestConfiguration<global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder.PasswordRecoveryRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.NewPassword body, Action<RequestConfiguration<global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder.PasswordRecoveryRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/login/password-recovery?secret={secret}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Initiates a new password recovery for the given email address, or fails silently (returning a `200 Ok`) if no login corresponded to the email.Note that only logins who are registered may initiate a password recovery. Users who were invited by an org member and haven&apos;t finished their signup may not start a recovery.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Enhance.Client.Models.EmailAddress body, Action<RequestConfiguration<global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder.PasswordRecoveryRequestBuilderPutQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Enhance.Client.Models.EmailAddress body, Action<RequestConfiguration<global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder.PasswordRecoveryRequestBuilderPutQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, "{+baseurl}/login/password-recovery{?realmId*}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Finishes the password recovery for the recovery key.This operation only succeeds if the key hasn&apos;t expired. If it has, the user must initiate a new password recovery.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class PasswordRecoveryRequestBuilderPostQueryParameters 
        {
            /// <summary>The secret key for the password recovery.</summary>
            [QueryParameter("secret")]
            public Guid? Secret { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class PasswordRecoveryRequestBuilderPostRequestConfiguration : RequestConfiguration<global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder.PasswordRecoveryRequestBuilderPostQueryParameters>
        {
        }
        /// <summary>
        /// Initiates a new password recovery for the given email address, or fails silently (returning a `200 Ok`) if no login corresponded to the email.Note that only logins who are registered may initiate a password recovery. Users who were invited by an org member and haven&apos;t finished their signup may not start a recovery.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class PasswordRecoveryRequestBuilderPutQueryParameters 
        {
            /// <summary>If set, the login is looked up in the specified realm. If unset then the chosen realm will be based on the control panel hostname.</summary>
            [QueryParameter("realmId")]
            public Guid? RealmId { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class PasswordRecoveryRequestBuilderPutRequestConfiguration : RequestConfiguration<global::Enhance.Client.Login.PasswordRecovery.PasswordRecoveryRequestBuilder.PasswordRecoveryRequestBuilderPutQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
