// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Install.Compatible_versions;
using Enhance.Client.Install.Latest_available_version;
using Enhance.Client.Install.Update;
using Enhance.Client.Install.Validate;
using Enhance.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.Install
{
    /// <summary>
    /// Builds and executes requests for operations under \install
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class InstallRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The compatible_versions property</summary>
        public global::Enhance.Client.Install.Compatible_versions.Compatible_versionsRequestBuilder Compatible_versions
        {
            get => new global::Enhance.Client.Install.Compatible_versions.Compatible_versionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The latest_available_version property</summary>
        public global::Enhance.Client.Install.Latest_available_version.Latest_available_versionRequestBuilder Latest_available_version
        {
            get => new global::Enhance.Client.Install.Latest_available_version.Latest_available_versionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The update property</summary>
        public global::Enhance.Client.Install.Update.UpdateRequestBuilder Update
        {
            get => new global::Enhance.Client.Install.Update.UpdateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The validate property</summary>
        public global::Enhance.Client.Install.Validate.ValidateRequestBuilder Validate
        {
            get => new global::Enhance.Client.Install.Validate.ValidateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Install.InstallRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InstallRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/install?key={key}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Install.InstallRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InstallRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/install?key={key}", rawUrl)
        {
        }
        /// <summary>
        /// Installs the control panel.It creates the master org owner and sets the master org control panel host. This procedure may only be invoked once, when the control panel is first set up.It also authenticates the new login and returns a session token as a convenience step.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.SetupResult"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Models.SetupResult?> PostAsync(global::Enhance.Client.Models.Install body, Action<RequestConfiguration<global::Enhance.Client.Install.InstallRequestBuilder.InstallRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Models.SetupResult> PostAsync(global::Enhance.Client.Models.Install body, Action<RequestConfiguration<global::Enhance.Client.Install.InstallRequestBuilder.InstallRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Models.SetupResult>(requestInfo, global::Enhance.Client.Models.SetupResult.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Installs the control panel.It creates the master org owner and sets the master org control panel host. This procedure may only be invoked once, when the control panel is first set up.It also authenticates the new login and returns a session token as a convenience step.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.Install body, Action<RequestConfiguration<global::Enhance.Client.Install.InstallRequestBuilder.InstallRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.Install body, Action<RequestConfiguration<global::Enhance.Client.Install.InstallRequestBuilder.InstallRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Install.InstallRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.Install.InstallRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.Install.InstallRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Installs the control panel.It creates the master org owner and sets the master org control panel host. This procedure may only be invoked once, when the control panel is first set up.It also authenticates the new login and returns a session token as a convenience step.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class InstallRequestBuilderPostQueryParameters 
        {
            /// <summary>The secret registration key</summary>
            [QueryParameter("key")]
            public Guid? Key { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class InstallRequestBuilderPostRequestConfiguration : RequestConfiguration<global::Enhance.Client.Install.InstallRequestBuilder.InstallRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
