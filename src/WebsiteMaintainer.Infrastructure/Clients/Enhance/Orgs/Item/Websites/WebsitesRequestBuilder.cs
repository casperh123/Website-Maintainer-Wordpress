// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Models;
using Enhance.Client.Orgs.Item.Websites.Clone;
using Enhance.Client.Orgs.Item.Websites.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.Orgs.Item.Websites
{
    /// <summary>
    /// Builds and executes requests for operations under \orgs\{org_id}\websites
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class WebsitesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The clone property</summary>
        public global::Enhance.Client.Orgs.Item.Websites.Clone.CloneRequestBuilder Clone
        {
            get => new global::Enhance.Client.Orgs.Item.Websites.Clone.CloneRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Enhance.Client.orgs.item.websites.item collection</summary>
        /// <param name="position">The id of the website.</param>
        /// <returns>A <see cref="global::Enhance.Client.Orgs.Item.Websites.Item.WithWebsite_ItemRequestBuilder"/></returns>
        public global::Enhance.Client.Orgs.Item.Websites.Item.WithWebsite_ItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("website_id", position);
                return new global::Enhance.Client.Orgs.Item.Websites.Item.WithWebsite_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Enhance.Client.orgs.item.websites.item collection</summary>
        /// <param name="position">The id of the website.</param>
        /// <returns>A <see cref="global::Enhance.Client.Orgs.Item.Websites.Item.WithWebsite_ItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Enhance.Client.Orgs.Item.Websites.Item.WithWebsite_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("website_id", position);
                return new global::Enhance.Client.Orgs.Item.Websites.Item.WithWebsite_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WebsitesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/orgs/{org_id}/websites{?isSuspended*,kind*,limit*,offset*,planId*,recursion*,roles,search*,servers,showAliases*,showDeleted*,sortBy*,sortOrder*,status*,subscriptionId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WebsitesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/orgs/{org_id}/websites{?isSuspended*,kind*,limit*,offset*,planId*,recursion*,roles,search*,servers,showAliases*,showDeleted*,sortBy*,sortOrder*,status*,subscriptionId*}", rawUrl)
        {
        }
        /// <summary>
        /// This operation can only be done by a logged in superadmin or owner of the organization or its parent organization(s).
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(global::Enhance.Client.Models.UuidListing body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(global::Enhance.Client.Models.UuidListing body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToDeleteRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all websites belonging to the organization.The results may optionally be sorted and paginated. If the recursive flag is set, the websites of customers of reseller customers are returned as well recursively, up to an optional max depth value.Session holder must be at least a `SuperAdmin` in this org or a parent org, or must have access to at least one website in this org. If the member is not an admin but has access to one or more websites, only those websites are returned.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.WebsitesListing"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Models.WebsitesListing?> GetAsync(Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder.WebsitesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Models.WebsitesListing> GetAsync(Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder.WebsitesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Models.WebsitesListing>(requestInfo, global::Enhance.Client.Models.WebsitesListing.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates or clone a website under the organization.If the org is the MO, the request need not contain a subscription ID, but if it&apos;s a customer and the session holder is not an MO admin, the subscription to which to attach the website must be supplied.If the website to be created is &apos;staging&apos; kind then the subscription must include stagingWebsites resource &gt; 1.  If &apos;normal&apos; then the subscription must include websites &gt; 1.If the website to be created is a control panel, the reseller&apos;s subscription id must match the reseller subscription.Session holder must be at least a `SuperAdmin` in this org or a parent org.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.NewResourceUuid"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Models.NewResourceUuid?> PostAsync(global::Enhance.Client.Models.NewWebsite body, Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder.WebsitesRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Models.NewResourceUuid> PostAsync(global::Enhance.Client.Models.NewWebsite body, Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder.WebsitesRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Models.NewResourceUuid>(requestInfo, global::Enhance.Client.Models.NewResourceUuid.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This operation can only be done by a logged in superadmin or owner of the organization or its parent organization(s).
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(global::Enhance.Client.Models.UuidListing body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(global::Enhance.Client.Models.UuidListing body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns all websites belonging to the organization.The results may optionally be sorted and paginated. If the recursive flag is set, the websites of customers of reseller customers are returned as well recursively, up to an optional max depth value.Session holder must be at least a `SuperAdmin` in this org or a parent org, or must have access to at least one website in this org. If the member is not an admin but has access to one or more websites, only those websites are returned.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder.WebsitesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder.WebsitesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates or clone a website under the organization.If the org is the MO, the request need not contain a subscription ID, but if it&apos;s a customer and the session holder is not an MO admin, the subscription to which to attach the website must be supplied.If the website to be created is &apos;staging&apos; kind then the subscription must include stagingWebsites resource &gt; 1.  If &apos;normal&apos; then the subscription must include websites &gt; 1.If the website to be created is a control panel, the reseller&apos;s subscription id must match the reseller subscription.Session holder must be at least a `SuperAdmin` in this org or a parent org.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.NewWebsite body, Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder.WebsitesRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.NewWebsite body, Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder.WebsitesRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WebsitesRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Returns all websites belonging to the organization.The results may optionally be sorted and paginated. If the recursive flag is set, the websites of customers of reseller customers are returned as well recursively, up to an optional max depth value.Session holder must be at least a `SuperAdmin` in this org or a parent org, or must have access to at least one website in this org. If the member is not an admin but has access to one or more websites, only those websites are returned.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WebsitesRequestBuilderGetQueryParameters 
        {
            /// <summary>Limit the result set to websites which are currently suspended or not suspended.</summary>
            [QueryParameter("isSuspended")]
            public bool? IsSuspended { get; set; }
            /// <summary>Limit the results to websites of the specified type.</summary>
            [Obsolete("This property is deprecated, use KindAsWebsiteKind instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("kind")]
            public string? Kind { get; set; }
#nullable restore
#else
            [QueryParameter("kind")]
            public string Kind { get; set; }
#endif
            /// <summary>Limit the results to websites of the specified type.</summary>
            [QueryParameter("kind")]
            public global::Enhance.Client.Models.WebsiteKind? KindAsWebsiteKind { get; set; }
            /// <summary>The maximum number of items to return.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>The offset from which to return items.</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>Limit the result set to resources under subscriptions to the plan.</summary>
            [QueryParameter("planId")]
            public int? PlanId { get; set; }
            /// <summary>If set to directCustomers then websites belonging to direct customers of the orgId will be returned.  If set to infinite then websites belonging to customers of customers (and so on) will be returned.  If unset then no recursion will be performed.</summary>
            [Obsolete("This property is deprecated, use RecursionAsRecursion instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("recursion")]
            public string? Recursion { get; set; }
#nullable restore
#else
            [QueryParameter("recursion")]
            public string Recursion { get; set; }
#endif
            /// <summary>If set to directCustomers then websites belonging to direct customers of the orgId will be returned.  If set to infinite then websites belonging to customers of customers (and so on) will be returned.  If unset then no recursion will be performed.</summary>
            [QueryParameter("recursion")]
            public global::Enhance.Client.Models.Recursion? RecursionAsRecursion { get; set; }
            /// <summary>Limit the result set to websites having one of these roles assigned to a server.</summary>
            [Obsolete("This property is deprecated, use RolesAsServerRole instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("roles")]
            public string[]? Roles { get; set; }
#nullable restore
#else
            [QueryParameter("roles")]
            public string[] Roles { get; set; }
#endif
            /// <summary>Limit the result set to websites having one of these roles assigned to a server.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("roles")]
            public global::Enhance.Client.Models.ServerRole[]? RolesAsServerRole { get; set; }
#nullable restore
#else
            [QueryParameter("roles")]
            public global::Enhance.Client.Models.ServerRole[] RolesAsServerRole { get; set; }
#endif
            /// <summary>Limit the result set to the resources whose names, partially and case insensitively, match the specified search term.E.g. for websites, this is their domain or tag, for databases the database name, for emails the email address or mailbox name, etc.A website will also be returned if the search term exactly matches the website&apos;s uuid.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
            /// <summary>Limit the result set to websites having one of the selected roles (or all roles) on one of these servers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("servers")]
            public Guid?[]? Servers { get; set; }
#nullable restore
#else
            [QueryParameter("servers")]
            public Guid?[] Servers { get; set; }
#endif
            /// <summary>Includes domain aliases in search results and listings in addition to the website&apos;s primary domain.</summary>
            [QueryParameter("showAliases")]
            public bool? ShowAliases { get; set; }
            /// <summary>Filters out deleted websites, which are otherwise returned in the result. Defaults to `showDeleted=true` if not set. Can only be set by MO, if set by others, a 403 is returned.</summary>
            [QueryParameter("showDeleted")]
            public bool? ShowDeleted { get; set; }
            /// <summary>The field by which to sort.</summary>
            [Obsolete("This property is deprecated, use SortByAsGetSortByQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortBy")]
            public string? SortBy { get; set; }
#nullable restore
#else
            [QueryParameter("sortBy")]
            public string SortBy { get; set; }
#endif
            /// <summary>The field by which to sort.</summary>
            [QueryParameter("sortBy")]
            public global::Enhance.Client.Orgs.Item.Websites.GetSortByQueryParameterType? SortByAsGetSortByQueryParameterType { get; set; }
            /// <summary>The direction in which to sort. Possible values are &apos;asc&apos; and &apos;desc&apos;, defaulting to &apos;asc&apos;.</summary>
            [Obsolete("This property is deprecated, use SortOrderAsGetSortOrderQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortOrder")]
            public string? SortOrder { get; set; }
#nullable restore
#else
            [QueryParameter("sortOrder")]
            public string SortOrder { get; set; }
#endif
            /// <summary>The direction in which to sort. Possible values are &apos;asc&apos; and &apos;desc&apos;, defaulting to &apos;asc&apos;.</summary>
            [QueryParameter("sortOrder")]
            public global::Enhance.Client.Orgs.Item.Websites.GetSortOrderQueryParameterType? SortOrderAsGetSortOrderQueryParameterType { get; set; }
            /// <summary>Limit the result set to websites with the specified status. Only applicable if `recursive` is set to true.</summary>
            [Obsolete("This property is deprecated, use StatusAsWebsiteStatus instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("status")]
            public string? Status { get; set; }
#nullable restore
#else
            [QueryParameter("status")]
            public string Status { get; set; }
#endif
            /// <summary>Limit the result set to websites with the specified status. Only applicable if `recursive` is set to true.</summary>
            [QueryParameter("status")]
            public global::Enhance.Client.Models.WebsiteStatus? StatusAsWebsiteStatus { get; set; }
            /// <summary>Limit the result set to resources under subscription.</summary>
            [QueryParameter("subscriptionId")]
            public int? SubscriptionId { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WebsitesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder.WebsitesRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Creates or clone a website under the organization.If the org is the MO, the request need not contain a subscription ID, but if it&apos;s a customer and the session holder is not an MO admin, the subscription to which to attach the website must be supplied.If the website to be created is &apos;staging&apos; kind then the subscription must include stagingWebsites resource &gt; 1.  If &apos;normal&apos; then the subscription must include websites &gt; 1.If the website to be created is a control panel, the reseller&apos;s subscription id must match the reseller subscription.Session holder must be at least a `SuperAdmin` in this org or a parent org.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WebsitesRequestBuilderPostQueryParameters 
        {
            /// <summary>The kind of a *special* website that needs to be created. Whether this website is to be a *control panel* website or a *phpMyAdmin* website. Note: in order to create a new *phpMyAdmin* website the control panel website needs to be created first, since the new phpMyAdmin website will be under the control panel domain.</summary>
            [Obsolete("This property is deprecated, use KindAsWebsiteKind instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("kind")]
            public string? Kind { get; set; }
#nullable restore
#else
            [QueryParameter("kind")]
            public string Kind { get; set; }
#endif
            /// <summary>The kind of a *special* website that needs to be created. Whether this website is to be a *control panel* website or a *phpMyAdmin* website. Note: in order to create a new *phpMyAdmin* website the control panel website needs to be created first, since the new phpMyAdmin website will be under the control panel domain.</summary>
            [QueryParameter("kind")]
            public global::Enhance.Client.Models.WebsiteKind? KindAsWebsiteKind { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WebsitesRequestBuilderPostRequestConfiguration : RequestConfiguration<global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder.WebsitesRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
