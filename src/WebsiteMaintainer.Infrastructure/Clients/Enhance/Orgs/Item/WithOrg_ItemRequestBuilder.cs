// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Models;
using Enhance.Client.Orgs.Item.Access_tokens;
using Enhance.Client.Orgs.Item.Avatar;
using Enhance.Client.Orgs.Item.Branding;
using Enhance.Client.Orgs.Item.Cloudflare;
using Enhance.Client.Orgs.Item.Customers;
using Enhance.Client.Orgs.Item.Domains;
using Enhance.Client.Orgs.Item.Emails;
using Enhance.Client.Orgs.Item.Import;
using Enhance.Client.Orgs.Item.Invites;
using Enhance.Client.Orgs.Item.Logins;
using Enhance.Client.Orgs.Item.Members;
using Enhance.Client.Orgs.Item.MysqlDbs;
using Enhance.Client.Orgs.Item.NameServers;
using Enhance.Client.Orgs.Item.Owner;
using Enhance.Client.Orgs.Item.Plans;
using Enhance.Client.Orgs.Item.StagingDomain;
using Enhance.Client.Orgs.Item.Stats;
using Enhance.Client.Orgs.Item.Subscriptions;
using Enhance.Client.Orgs.Item.Tags;
using Enhance.Client.Orgs.Item.Websites;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.Orgs.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \orgs\{org_id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class WithOrg_ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The access_tokens property</summary>
        public global::Enhance.Client.Orgs.Item.Access_tokens.Access_tokensRequestBuilder Access_tokens
        {
            get => new global::Enhance.Client.Orgs.Item.Access_tokens.Access_tokensRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The avatar property</summary>
        public global::Enhance.Client.Orgs.Item.Avatar.AvatarRequestBuilder Avatar
        {
            get => new global::Enhance.Client.Orgs.Item.Avatar.AvatarRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The branding property</summary>
        public global::Enhance.Client.Orgs.Item.Branding.BrandingRequestBuilder Branding
        {
            get => new global::Enhance.Client.Orgs.Item.Branding.BrandingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cloudflare property</summary>
        public global::Enhance.Client.Orgs.Item.Cloudflare.CloudflareRequestBuilder Cloudflare
        {
            get => new global::Enhance.Client.Orgs.Item.Cloudflare.CloudflareRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The customers property</summary>
        public global::Enhance.Client.Orgs.Item.Customers.CustomersRequestBuilder Customers
        {
            get => new global::Enhance.Client.Orgs.Item.Customers.CustomersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The domains property</summary>
        public global::Enhance.Client.Orgs.Item.Domains.DomainsRequestBuilder Domains
        {
            get => new global::Enhance.Client.Orgs.Item.Domains.DomainsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The emails property</summary>
        public global::Enhance.Client.Orgs.Item.Emails.EmailsRequestBuilder Emails
        {
            get => new global::Enhance.Client.Orgs.Item.Emails.EmailsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The import property</summary>
        public global::Enhance.Client.Orgs.Item.Import.ImportRequestBuilder Import
        {
            get => new global::Enhance.Client.Orgs.Item.Import.ImportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The invites property</summary>
        public global::Enhance.Client.Orgs.Item.Invites.InvitesRequestBuilder Invites
        {
            get => new global::Enhance.Client.Orgs.Item.Invites.InvitesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logins property</summary>
        public global::Enhance.Client.Orgs.Item.Logins.LoginsRequestBuilder Logins
        {
            get => new global::Enhance.Client.Orgs.Item.Logins.LoginsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The members property</summary>
        public global::Enhance.Client.Orgs.Item.Members.MembersRequestBuilder Members
        {
            get => new global::Enhance.Client.Orgs.Item.Members.MembersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mysqlDbs property</summary>
        public global::Enhance.Client.Orgs.Item.MysqlDbs.MysqlDbsRequestBuilder MysqlDbs
        {
            get => new global::Enhance.Client.Orgs.Item.MysqlDbs.MysqlDbsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The nameServers property</summary>
        public global::Enhance.Client.Orgs.Item.NameServers.NameServersRequestBuilder NameServers
        {
            get => new global::Enhance.Client.Orgs.Item.NameServers.NameServersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The owner property</summary>
        public global::Enhance.Client.Orgs.Item.Owner.OwnerRequestBuilder Owner
        {
            get => new global::Enhance.Client.Orgs.Item.Owner.OwnerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The plans property</summary>
        public global::Enhance.Client.Orgs.Item.Plans.PlansRequestBuilder Plans
        {
            get => new global::Enhance.Client.Orgs.Item.Plans.PlansRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The stagingDomain property</summary>
        public global::Enhance.Client.Orgs.Item.StagingDomain.StagingDomainRequestBuilder StagingDomain
        {
            get => new global::Enhance.Client.Orgs.Item.StagingDomain.StagingDomainRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The stats property</summary>
        public global::Enhance.Client.Orgs.Item.Stats.StatsRequestBuilder Stats
        {
            get => new global::Enhance.Client.Orgs.Item.Stats.StatsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The subscriptions property</summary>
        public global::Enhance.Client.Orgs.Item.Subscriptions.SubscriptionsRequestBuilder Subscriptions
        {
            get => new global::Enhance.Client.Orgs.Item.Subscriptions.SubscriptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tags property</summary>
        public global::Enhance.Client.Orgs.Item.Tags.TagsRequestBuilder Tags
        {
            get => new global::Enhance.Client.Orgs.Item.Tags.TagsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The websites property</summary>
        public global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder Websites
        {
            get => new global::Enhance.Client.Orgs.Item.Websites.WebsitesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Orgs.Item.WithOrg_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithOrg_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/orgs/{org_id}{?force*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Orgs.Item.WithOrg_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithOrg_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/orgs/{org_id}{?force*}", rawUrl)
        {
        }
        /// <summary>
        /// Soft or force deletes the organization and its resources.All resources under the organization (websites, customers in case of a reseller) will be deleted too.If the organization is soft-deleted (or marked as deleted), its data is not removed.  For removing all data and metadata, pass the `force=true` query parameter. This can only be done by a privileged MO member. In this case, all data is wiped, so use carefully.If the `force` parameter is set, session holder must be an MO Owner, SuperAdmin, or Support member, otherwise it suffices for them to be such a member in a parent org.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.WithOrg_ItemRequestBuilder.WithOrg_ItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.WithOrg_ItemRequestBuilder.WithOrg_ItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns basic organization information.Session holder must be at least a `SuperAdmin` in this org or a parent org.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.Org"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Models.Org?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Models.Org> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Models.Org>(requestInfo, global::Enhance.Client.Models.Org.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates the given org&apos;s name.Session holder must be at least a `SuperAdmin` in this org or a parent org.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PatchAsync(global::Enhance.Client.Models.OrgUpdate body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PatchAsync(global::Enhance.Client.Models.OrgUpdate body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Soft or force deletes the organization and its resources.All resources under the organization (websites, customers in case of a reseller) will be deleted too.If the organization is soft-deleted (or marked as deleted), its data is not removed.  For removing all data and metadata, pass the `force=true` query parameter. This can only be done by a privileged MO member. In this case, all data is wiped, so use carefully.If the `force` parameter is set, session holder must be an MO Owner, SuperAdmin, or Support member, otherwise it suffices for them to be such a member in a parent org.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.WithOrg_ItemRequestBuilder.WithOrg_ItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::Enhance.Client.Orgs.Item.WithOrg_ItemRequestBuilder.WithOrg_ItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns basic organization information.Session holder must be at least a `SuperAdmin` in this org or a parent org.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates the given org&apos;s name.Session holder must be at least a `SuperAdmin` in this org or a parent org.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Enhance.Client.Models.OrgUpdate body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Enhance.Client.Models.OrgUpdate body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Orgs.Item.WithOrg_ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.Orgs.Item.WithOrg_ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.Orgs.Item.WithOrg_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Soft or force deletes the organization and its resources.All resources under the organization (websites, customers in case of a reseller) will be deleted too.If the organization is soft-deleted (or marked as deleted), its data is not removed.  For removing all data and metadata, pass the `force=true` query parameter. This can only be done by a privileged MO member. In this case, all data is wiped, so use carefully.If the `force` parameter is set, session holder must be an MO Owner, SuperAdmin, or Support member, otherwise it suffices for them to be such a member in a parent org.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithOrg_ItemRequestBuilderDeleteQueryParameters 
        {
            [QueryParameter("force")]
            public bool? Force { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithOrg_ItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<global::Enhance.Client.Orgs.Item.WithOrg_ItemRequestBuilder.WithOrg_ItemRequestBuilderDeleteQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithOrg_ItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithOrg_ItemRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
