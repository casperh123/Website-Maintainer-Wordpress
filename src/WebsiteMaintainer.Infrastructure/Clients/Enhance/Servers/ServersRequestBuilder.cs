// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Models;
using Enhance.Client.Servers.Groups;
using Enhance.Client.Servers.Init;
using Enhance.Client.Servers.InstallCmd;
using Enhance.Client.Servers.Item;
using Enhance.Client.Servers.Master;
using Enhance.Client.Servers.RegistrationKey;
using Enhance.Client.Servers.Slaves;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.Servers
{
    /// <summary>
    /// Builds and executes requests for operations under \servers
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class ServersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The groups property</summary>
        public global::Enhance.Client.Servers.Groups.GroupsRequestBuilder Groups
        {
            get => new global::Enhance.Client.Servers.Groups.GroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The init property</summary>
        public global::Enhance.Client.Servers.Init.InitRequestBuilder Init
        {
            get => new global::Enhance.Client.Servers.Init.InitRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The installCmd property</summary>
        public global::Enhance.Client.Servers.InstallCmd.InstallCmdRequestBuilder InstallCmd
        {
            get => new global::Enhance.Client.Servers.InstallCmd.InstallCmdRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The master property</summary>
        public global::Enhance.Client.Servers.Master.MasterRequestBuilder Master
        {
            get => new global::Enhance.Client.Servers.Master.MasterRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The registrationKey property</summary>
        public global::Enhance.Client.Servers.RegistrationKey.RegistrationKeyRequestBuilder RegistrationKey
        {
            get => new global::Enhance.Client.Servers.RegistrationKey.RegistrationKeyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The slaves property</summary>
        public global::Enhance.Client.Servers.Slaves.SlavesRequestBuilder Slaves
        {
            get => new global::Enhance.Client.Servers.Slaves.SlavesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Enhance.Client.servers.item collection</summary>
        /// <param name="position">The UUID of the server</param>
        /// <returns>A <see cref="global::Enhance.Client.Servers.Item.WithServer_ItemRequestBuilder"/></returns>
        public global::Enhance.Client.Servers.Item.WithServer_ItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("server_id", position);
                return new global::Enhance.Client.Servers.Item.WithServer_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Enhance.Client.servers.item collection</summary>
        /// <param name="position">The UUID of the server</param>
        /// <returns>A <see cref="global::Enhance.Client.Servers.Item.WithServer_ItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Enhance.Client.Servers.Item.WithServer_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("server_id", position);
                return new global::Enhance.Client.Servers.Item.WithServer_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Servers.ServersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ServersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/servers{?limit*,offset*,sortBy*,sortOrder*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Servers.ServersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ServersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/servers{?limit*,offset*,sortBy*,sortOrder*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of all servers in this Enhance cluster (including the master server and all slaves).The result set of servers may optionally be sorted, paginated, as well as grouped by a server&apos;s group id. If not grouped, the returned items are a flat list of server resource objects, whereas if grouped, the returned items are an object (map) of list of servers mapped to their group ids.Grouping is applied after pagination and sorting, and in the latter case the servers within one group will be sorted. Therefore, if paginated, the last group in items, i.e. the group on the &quot;border&quot;, may not contain all servers belonging to that group if the given limit was such as would be exceeded if all its servers were included. In such a case, the remaining servers of the group are returned in the next batch.Example: Assume servers server1, server2, server3, server4, server5 and groups group1, group2, where group1 contains server1 and group2 contains server2, server3, and server4 is not in a group. If the request specifies an offset of 0 and a limit of 2, then the returned structure may be as follows: ```json {    items: {        group1_id: [            server1,        ],        group2_id: [            server2,        ],    },    total: 4} ``` Then, in the next request, if offset is changed to 2, the returned items may be: ```json {    items: {        group2_id: [            server3,        ],        &quot;ungrouped&quot;: [            server4        ],    },    total: 4} ``` Containing the rest of group2&apos;s servers as well as the ungrouped servers.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.ServersListing"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Models.ServersListing?> GetAsync(Action<RequestConfiguration<global::Enhance.Client.Servers.ServersRequestBuilder.ServersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Models.ServersListing> GetAsync(Action<RequestConfiguration<global::Enhance.Client.Servers.ServersRequestBuilder.ServersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Models.ServersListing>(requestInfo, global::Enhance.Client.Models.ServersListing.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of all servers in this Enhance cluster (including the master server and all slaves).The result set of servers may optionally be sorted, paginated, as well as grouped by a server&apos;s group id. If not grouped, the returned items are a flat list of server resource objects, whereas if grouped, the returned items are an object (map) of list of servers mapped to their group ids.Grouping is applied after pagination and sorting, and in the latter case the servers within one group will be sorted. Therefore, if paginated, the last group in items, i.e. the group on the &quot;border&quot;, may not contain all servers belonging to that group if the given limit was such as would be exceeded if all its servers were included. In such a case, the remaining servers of the group are returned in the next batch.Example: Assume servers server1, server2, server3, server4, server5 and groups group1, group2, where group1 contains server1 and group2 contains server2, server3, and server4 is not in a group. If the request specifies an offset of 0 and a limit of 2, then the returned structure may be as follows: ```json {    items: {        group1_id: [            server1,        ],        group2_id: [            server2,        ],    },    total: 4} ``` Then, in the next request, if offset is changed to 2, the returned items may be: ```json {    items: {        group2_id: [            server3,        ],        &quot;ungrouped&quot;: [            server4        ],    },    total: 4} ``` Containing the rest of group2&apos;s servers as well as the ungrouped servers.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Enhance.Client.Servers.ServersRequestBuilder.ServersRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Enhance.Client.Servers.ServersRequestBuilder.ServersRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Servers.ServersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.Servers.ServersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.Servers.ServersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of all servers in this Enhance cluster (including the master server and all slaves).The result set of servers may optionally be sorted, paginated, as well as grouped by a server&apos;s group id. If not grouped, the returned items are a flat list of server resource objects, whereas if grouped, the returned items are an object (map) of list of servers mapped to their group ids.Grouping is applied after pagination and sorting, and in the latter case the servers within one group will be sorted. Therefore, if paginated, the last group in items, i.e. the group on the &quot;border&quot;, may not contain all servers belonging to that group if the given limit was such as would be exceeded if all its servers were included. In such a case, the remaining servers of the group are returned in the next batch.Example: Assume servers server1, server2, server3, server4, server5 and groups group1, group2, where group1 contains server1 and group2 contains server2, server3, and server4 is not in a group. If the request specifies an offset of 0 and a limit of 2, then the returned structure may be as follows: ```json {    items: {        group1_id: [            server1,        ],        group2_id: [            server2,        ],    },    total: 4} ``` Then, in the next request, if offset is changed to 2, the returned items may be: ```json {    items: {        group2_id: [            server3,        ],        &quot;ungrouped&quot;: [            server4        ],    },    total: 4} ``` Containing the rest of group2&apos;s servers as well as the ungrouped servers.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class ServersRequestBuilderGetQueryParameters 
        {
            /// <summary>The maximum number of items to return.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>The offset from which to return items.</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>The field by which to sort.</summary>
            [Obsolete("This property is deprecated, use SortByAsGetSortByQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortBy")]
            public string? SortBy { get; set; }
#nullable restore
#else
            [QueryParameter("sortBy")]
            public string SortBy { get; set; }
#endif
            /// <summary>The field by which to sort.</summary>
            [QueryParameter("sortBy")]
            public global::Enhance.Client.Servers.GetSortByQueryParameterType? SortByAsGetSortByQueryParameterType { get; set; }
            /// <summary>The direction in which to sort. Possible values are &apos;asc&apos; and &apos;desc&apos;, defaulting to &apos;asc&apos;.</summary>
            [Obsolete("This property is deprecated, use SortOrderAsGetSortOrderQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortOrder")]
            public string? SortOrder { get; set; }
#nullable restore
#else
            [QueryParameter("sortOrder")]
            public string SortOrder { get; set; }
#endif
            /// <summary>The direction in which to sort. Possible values are &apos;asc&apos; and &apos;desc&apos;, defaulting to &apos;asc&apos;.</summary>
            [QueryParameter("sortOrder")]
            public global::Enhance.Client.Servers.GetSortOrderQueryParameterType? SortOrderAsGetSortOrderQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class ServersRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Enhance.Client.Servers.ServersRequestBuilder.ServersRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
