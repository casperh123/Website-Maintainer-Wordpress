// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Models;
using Enhance.Client.Servers.Item.Appcd;
using Enhance.Client.Servers.Item.Decommissioned;
using Enhance.Client.Servers.Item.DiskUsage;
using Enhance.Client.Servers.Item.Domains;
using Enhance.Client.Servers.Item.Email;
using Enhance.Client.Servers.Item.FsQuotaLimits;
using Enhance.Client.Servers.Item.Group;
using Enhance.Client.Servers.Item.HistoricStats;
using Enhance.Client.Servers.Item.Interfaces;
using Enhance.Client.Servers.Item.Iowait;
using Enhance.Client.Servers.Item.Load;
using Enhance.Client.Servers.Item.MemoryUsage;
using Enhance.Client.Servers.Item.NetworkStats;
using Enhance.Client.Servers.Item.Packages;
using Enhance.Client.Servers.Item.Php;
using Enhance.Client.Servers.Item.PrimaryIp;
using Enhance.Client.Servers.Item.Roles;
using Enhance.Client.Servers.Item.Services;
using Enhance.Client.Servers.Item.Settings;
using Enhance.Client.Servers.Item.Spam;
using Enhance.Client.Servers.Item.Status;
using Enhance.Client.Servers.Item.Uptime;
using Enhance.Client.Servers.Item.Webserver;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.Servers.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \servers\{server_id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class WithServer_ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The appcd property</summary>
        public global::Enhance.Client.Servers.Item.Appcd.AppcdRequestBuilder Appcd
        {
            get => new global::Enhance.Client.Servers.Item.Appcd.AppcdRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The decommissioned property</summary>
        public global::Enhance.Client.Servers.Item.Decommissioned.DecommissionedRequestBuilder Decommissioned
        {
            get => new global::Enhance.Client.Servers.Item.Decommissioned.DecommissionedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The diskUsage property</summary>
        public global::Enhance.Client.Servers.Item.DiskUsage.DiskUsageRequestBuilder DiskUsage
        {
            get => new global::Enhance.Client.Servers.Item.DiskUsage.DiskUsageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The domains property</summary>
        public global::Enhance.Client.Servers.Item.Domains.DomainsRequestBuilder Domains
        {
            get => new global::Enhance.Client.Servers.Item.Domains.DomainsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The email property</summary>
        public global::Enhance.Client.Servers.Item.Email.EmailRequestBuilder Email
        {
            get => new global::Enhance.Client.Servers.Item.Email.EmailRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The fsQuotaLimits property</summary>
        public global::Enhance.Client.Servers.Item.FsQuotaLimits.FsQuotaLimitsRequestBuilder FsQuotaLimits
        {
            get => new global::Enhance.Client.Servers.Item.FsQuotaLimits.FsQuotaLimitsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The group property</summary>
        public global::Enhance.Client.Servers.Item.Group.GroupRequestBuilder Group
        {
            get => new global::Enhance.Client.Servers.Item.Group.GroupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The historicStats property</summary>
        public global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder HistoricStats
        {
            get => new global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The interfaces property</summary>
        public global::Enhance.Client.Servers.Item.Interfaces.InterfacesRequestBuilder Interfaces
        {
            get => new global::Enhance.Client.Servers.Item.Interfaces.InterfacesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The iowait property</summary>
        public global::Enhance.Client.Servers.Item.Iowait.IowaitRequestBuilder Iowait
        {
            get => new global::Enhance.Client.Servers.Item.Iowait.IowaitRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The load property</summary>
        public global::Enhance.Client.Servers.Item.Load.LoadRequestBuilder Load
        {
            get => new global::Enhance.Client.Servers.Item.Load.LoadRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The memoryUsage property</summary>
        public global::Enhance.Client.Servers.Item.MemoryUsage.MemoryUsageRequestBuilder MemoryUsage
        {
            get => new global::Enhance.Client.Servers.Item.MemoryUsage.MemoryUsageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The networkStats property</summary>
        public global::Enhance.Client.Servers.Item.NetworkStats.NetworkStatsRequestBuilder NetworkStats
        {
            get => new global::Enhance.Client.Servers.Item.NetworkStats.NetworkStatsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The packages property</summary>
        public global::Enhance.Client.Servers.Item.Packages.PackagesRequestBuilder Packages
        {
            get => new global::Enhance.Client.Servers.Item.Packages.PackagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The php property</summary>
        public global::Enhance.Client.Servers.Item.Php.PhpRequestBuilder Php
        {
            get => new global::Enhance.Client.Servers.Item.Php.PhpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The primaryIp property</summary>
        public global::Enhance.Client.Servers.Item.PrimaryIp.PrimaryIpRequestBuilder PrimaryIp
        {
            get => new global::Enhance.Client.Servers.Item.PrimaryIp.PrimaryIpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The roles property</summary>
        public global::Enhance.Client.Servers.Item.Roles.RolesRequestBuilder Roles
        {
            get => new global::Enhance.Client.Servers.Item.Roles.RolesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The services property</summary>
        public global::Enhance.Client.Servers.Item.Services.ServicesRequestBuilder Services
        {
            get => new global::Enhance.Client.Servers.Item.Services.ServicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        public global::Enhance.Client.Servers.Item.Settings.SettingsRequestBuilder Settings
        {
            get => new global::Enhance.Client.Servers.Item.Settings.SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The spam property</summary>
        public global::Enhance.Client.Servers.Item.Spam.SpamRequestBuilder Spam
        {
            get => new global::Enhance.Client.Servers.Item.Spam.SpamRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The status property</summary>
        public global::Enhance.Client.Servers.Item.Status.StatusRequestBuilder Status
        {
            get => new global::Enhance.Client.Servers.Item.Status.StatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The uptime property</summary>
        public global::Enhance.Client.Servers.Item.Uptime.UptimeRequestBuilder Uptime
        {
            get => new global::Enhance.Client.Servers.Item.Uptime.UptimeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webserver property</summary>
        public global::Enhance.Client.Servers.Item.Webserver.WebserverRequestBuilder Webserver
        {
            get => new global::Enhance.Client.Servers.Item.Webserver.WebserverRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Servers.Item.WithServer_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithServer_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/servers/{server_id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Servers.Item.WithServer_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithServer_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/servers/{server_id}", rawUrl)
        {
        }
        /// <summary>
        /// Removes a given server from the Enhance cluster.The server to be removed may only be a slave server as the master server cannot be removed (the error code `invalid_argument` is returned in such a case). Moreover, the server cannot be deleted if it has any data (such as running/suspended website, emails, etc) on it.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns info about the selected server, if it exists.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.ServerInfo"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Models.ServerInfo?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Models.ServerInfo> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Models.ServerInfo>(requestInfo, global::Enhance.Client.Models.ServerInfo.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Configures a server with roles to enable or disable, a friendly name to give (for identification purposes), and/or to assign server to a group.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PatchAsync(global::Enhance.Client.Models.ServerConf body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PatchAsync(global::Enhance.Client.Models.ServerConf body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Removes a given server from the Enhance cluster.The server to be removed may only be a slave server as the master server cannot be removed (the error code `invalid_argument` is returned in such a case). Moreover, the server cannot be deleted if it has any data (such as running/suspended website, emails, etc) on it.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns info about the selected server, if it exists.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Configures a server with roles to enable or disable, a friendly name to give (for identification purposes), and/or to assign server to a group.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Enhance.Client.Models.ServerConf body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Enhance.Client.Models.ServerConf body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Servers.Item.WithServer_ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.Servers.Item.WithServer_ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.Servers.Item.WithServer_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithServer_ItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithServer_ItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithServer_ItemRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
