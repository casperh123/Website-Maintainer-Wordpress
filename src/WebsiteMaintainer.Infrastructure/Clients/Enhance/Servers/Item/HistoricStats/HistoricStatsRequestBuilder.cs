// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.Servers.Item.HistoricStats
{
    /// <summary>
    /// Builds and executes requests for operations under \servers\{server_id}\historic-stats
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class HistoricStatsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public HistoricStatsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/servers/{server_id}/historic-stats{?end*,start*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public HistoricStatsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/servers/{server_id}/historic-stats{?end*,start*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns server stats between the optional start and end date. Defaults to last 24 hours.Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.ServerStatsFullListing"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Models.ServerStatsFullListing?> GetAsync(Action<RequestConfiguration<global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder.HistoricStatsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Models.ServerStatsFullListing> GetAsync(Action<RequestConfiguration<global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder.HistoricStatsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Models.ServerStatsFullListing>(requestInfo, global::Enhance.Client.Models.ServerStatsFullListing.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns server stats between the optional start and end date. Defaults to last 24 hours.Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder.HistoricStatsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder.HistoricStatsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns server stats between the optional start and end date. Defaults to last 24 hours.Session holder must be at least a `SuperAdmin` in this org or a parent org, or be a member in this org that has access to the website.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class HistoricStatsRequestBuilderGetQueryParameters 
        {
            /// <summary>End datetime UTC.</summary>
            [QueryParameter("end")]
            public DateTimeOffset? End { get; set; }
            /// <summary>Start datetime UTC.</summary>
            [QueryParameter("start")]
            public DateTimeOffset? Start { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class HistoricStatsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Enhance.Client.Servers.Item.HistoricStats.HistoricStatsRequestBuilder.HistoricStatsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
