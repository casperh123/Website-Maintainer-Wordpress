// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Models;
using Enhance.Client.Servers.Item.Roles.Item.Httpd_status;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.Servers.Item.Roles.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \servers\{server_id}\roles\{role}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class WithRoleItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The httpd_status property</summary>
        public global::Enhance.Client.Servers.Item.Roles.Item.Httpd_status.Httpd_statusRequestBuilder Httpd_status
        {
            get => new global::Enhance.Client.Servers.Item.Roles.Item.Httpd_status.Httpd_statusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRoleItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/servers/{server_id}/roles/{role}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRoleItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/servers/{server_id}/roles/{role}", rawUrl)
        {
        }
        /// <summary>
        /// Uninstalls role from server, if role has no websites assigned to it.If the role to be uninstalled is the control panel application role, the request returns an error, since this role may only be disabled but not uninstalled (since it is required to serve the control panel).Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns information about the given role on the server.This includes generic information about the role as well as each service in the role.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleGetResponse?> GetAsWithRoleGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleGetResponse> GetAsWithRoleGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleGetResponse>(requestInfo, global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns information about the given role on the server.This includes generic information about the role as well as each service in the role.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithRoleGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleResponse>(requestInfo, global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates role and role state.A role, if activated on a server, may be in a state of enabled or disabled. If enabled, it means that new resources (e.g. websites for the application role) may be installed on the server, but if it&apos;s disabled, existing resources (e.g. websites) are kept but no new resources may be added.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PatchAsync(global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRolePatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PatchAsync(global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRolePatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Installs a role on the server.The backup role takes additional parameters, but all other roles take no parameters.The block device size is optional and defaults to 100 GiB if not set.In this case, the mount point has to be the absolute path where the backup volume should be mounted. If there is already a valid btrfs backup volume mounted at this path, besides installing the `bkupd` service, this is a noop. In the case of an existing mount point, it is verified that it has at least the block device size bytes available.The block device is an absolute path that may or may not exist. If it exists, the block device size is used to verify if the device has at least the specified space available, if it doesn&apos;t exist, a loopback device is created with the this size.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The btrfs related information such as mount point and block device paths.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PutAsync(global::Enhance.Client.Models.NewBackupRole body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PutAsync(global::Enhance.Client.Models.NewBackupRole body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Uninstalls role from server, if role has no websites assigned to it.If the role to be uninstalled is the control panel application role, the request returns an error, since this role may only be disabled but not uninstalled (since it is required to serve the control panel).Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns information about the given role on the server.This includes generic information about the role as well as each service in the role.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates role and role state.A role, if activated on a server, may be in a state of enabled or disabled. If enabled, it means that new resources (e.g. websites for the application role) may be installed on the server, but if it&apos;s disabled, existing resources (e.g. websites) are kept but no new resources may be added.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRolePatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRolePatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Installs a role on the server.The backup role takes additional parameters, but all other roles take no parameters.The block device size is optional and defaults to 100 GiB if not set.In this case, the mount point has to be the absolute path where the backup volume should be mounted. If there is already a valid btrfs backup volume mounted at this path, besides installing the `bkupd` service, this is a noop. In the case of an existing mount point, it is verified that it has at least the block device size bytes available.The block device is an absolute path that may or may not exist. If it exists, the block device size is used to verify if the device has at least the specified space available, if it doesn&apos;t exist, a loopback device is created with the this size.Session holder must be an `Owner`, `SuperAdmin`, or `Sysadmin` in the MO.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The btrfs related information such as mount point and block device paths.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Enhance.Client.Models.NewBackupRole body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Enhance.Client.Models.NewBackupRole body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Enhance.Client.Models.ApplicationRoleInfo"/>, <see cref="global::Enhance.Client.Models.BackupRoleInfo"/>, <see cref="global::Enhance.Client.Models.DatabaseRoleInfo"/>, <see cref="global::Enhance.Client.Models.DnsRoleInfo"/>, <see cref="global::Enhance.Client.Models.EmailRoleInfo"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithRoleGetResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.ApplicationRoleInfo"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.ApplicationRoleInfo? ApplicationRoleInfo { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.ApplicationRoleInfo ApplicationRoleInfo { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.BackupRoleInfo"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.BackupRoleInfo? BackupRoleInfo { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.BackupRoleInfo BackupRoleInfo { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.DatabaseRoleInfo"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.DatabaseRoleInfo? DatabaseRoleInfo { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.DatabaseRoleInfo DatabaseRoleInfo { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.DnsRoleInfo"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.DnsRoleInfo? DnsRoleInfo { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.DnsRoleInfo DnsRoleInfo { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.EmailRoleInfo"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.EmailRoleInfo? EmailRoleInfo { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.EmailRoleInfo EmailRoleInfo { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleGetResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleGetResponse();
                if("ApplicationRoleInfo".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ApplicationRoleInfo = new global::Enhance.Client.Models.ApplicationRoleInfo();
                }
                else if("BackupRoleInfo".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.BackupRoleInfo = new global::Enhance.Client.Models.BackupRoleInfo();
                }
                else if("DatabaseRoleInfo".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DatabaseRoleInfo = new global::Enhance.Client.Models.DatabaseRoleInfo();
                }
                else if("DnsRoleInfo".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DnsRoleInfo = new global::Enhance.Client.Models.DnsRoleInfo();
                }
                else if("EmailRoleInfo".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.EmailRoleInfo = new global::Enhance.Client.Models.EmailRoleInfo();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(ApplicationRoleInfo != null)
                {
                    return ApplicationRoleInfo.GetFieldDeserializers();
                }
                else if(BackupRoleInfo != null)
                {
                    return BackupRoleInfo.GetFieldDeserializers();
                }
                else if(DatabaseRoleInfo != null)
                {
                    return DatabaseRoleInfo.GetFieldDeserializers();
                }
                else if(DnsRoleInfo != null)
                {
                    return DnsRoleInfo.GetFieldDeserializers();
                }
                else if(EmailRoleInfo != null)
                {
                    return EmailRoleInfo.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ApplicationRoleInfo != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.ApplicationRoleInfo>(null, ApplicationRoleInfo);
                }
                else if(BackupRoleInfo != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.BackupRoleInfo>(null, BackupRoleInfo);
                }
                else if(DatabaseRoleInfo != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.DatabaseRoleInfo>(null, DatabaseRoleInfo);
                }
                else if(DnsRoleInfo != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.DnsRoleInfo>(null, DnsRoleInfo);
                }
                else if(EmailRoleInfo != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.EmailRoleInfo>(null, EmailRoleInfo);
                }
            }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithRoleItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithRoleItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithRoleItemRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithRoleItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Enhance.Client.Models.UpdateApplicationRole"/>, <see cref="global::Enhance.Client.Models.UpdateBackupRole"/>, <see cref="global::Enhance.Client.Models.UpdateDatabaseRole"/>, <see cref="global::Enhance.Client.Models.UpdateDnsRole"/>, <see cref="global::Enhance.Client.Models.UpdateEmailRole"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithRolePatchRequestBody : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.UpdateApplicationRole"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.UpdateApplicationRole? UpdateApplicationRole { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.UpdateApplicationRole UpdateApplicationRole { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.UpdateBackupRole"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.UpdateBackupRole? UpdateBackupRole { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.UpdateBackupRole UpdateBackupRole { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.UpdateDatabaseRole"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.UpdateDatabaseRole? UpdateDatabaseRole { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.UpdateDatabaseRole UpdateDatabaseRole { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.UpdateDnsRole"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.UpdateDnsRole? UpdateDnsRole { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.UpdateDnsRole UpdateDnsRole { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.UpdateEmailRole"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.UpdateEmailRole? UpdateEmailRole { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.UpdateEmailRole UpdateEmailRole { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.UpdateApplicationRole"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.UpdateApplicationRole? WithRolePatchRequestBodyUpdateApplicationRole { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.UpdateApplicationRole WithRolePatchRequestBodyUpdateApplicationRole { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.UpdateBackupRole"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.UpdateBackupRole? WithRolePatchRequestBodyUpdateBackupRole { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.UpdateBackupRole WithRolePatchRequestBodyUpdateBackupRole { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.UpdateDatabaseRole"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.UpdateDatabaseRole? WithRolePatchRequestBodyUpdateDatabaseRole { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.UpdateDatabaseRole WithRolePatchRequestBodyUpdateDatabaseRole { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.UpdateDnsRole"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.UpdateDnsRole? WithRolePatchRequestBodyUpdateDnsRole { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.UpdateDnsRole WithRolePatchRequestBodyUpdateDnsRole { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.UpdateEmailRole"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.UpdateEmailRole? WithRolePatchRequestBodyUpdateEmailRole { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.UpdateEmailRole WithRolePatchRequestBodyUpdateEmailRole { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRolePatchRequestBody"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRolePatchRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRolePatchRequestBody();
                if("UpdateApplicationRole".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.UpdateApplicationRole = new global::Enhance.Client.Models.UpdateApplicationRole();
                }
                else if("UpdateBackupRole".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.UpdateBackupRole = new global::Enhance.Client.Models.UpdateBackupRole();
                }
                else if("UpdateDatabaseRole".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.UpdateDatabaseRole = new global::Enhance.Client.Models.UpdateDatabaseRole();
                }
                else if("UpdateDnsRole".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.UpdateDnsRole = new global::Enhance.Client.Models.UpdateDnsRole();
                }
                else if("UpdateEmailRole".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.UpdateEmailRole = new global::Enhance.Client.Models.UpdateEmailRole();
                }
                else if("UpdateApplicationRole".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.WithRolePatchRequestBodyUpdateApplicationRole = new global::Enhance.Client.Models.UpdateApplicationRole();
                }
                else if("UpdateBackupRole".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.WithRolePatchRequestBodyUpdateBackupRole = new global::Enhance.Client.Models.UpdateBackupRole();
                }
                else if("UpdateDatabaseRole".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.WithRolePatchRequestBodyUpdateDatabaseRole = new global::Enhance.Client.Models.UpdateDatabaseRole();
                }
                else if("UpdateDnsRole".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.WithRolePatchRequestBodyUpdateDnsRole = new global::Enhance.Client.Models.UpdateDnsRole();
                }
                else if("UpdateEmailRole".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.WithRolePatchRequestBodyUpdateEmailRole = new global::Enhance.Client.Models.UpdateEmailRole();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(UpdateApplicationRole != null)
                {
                    return UpdateApplicationRole.GetFieldDeserializers();
                }
                else if(UpdateBackupRole != null)
                {
                    return UpdateBackupRole.GetFieldDeserializers();
                }
                else if(UpdateDatabaseRole != null)
                {
                    return UpdateDatabaseRole.GetFieldDeserializers();
                }
                else if(UpdateDnsRole != null)
                {
                    return UpdateDnsRole.GetFieldDeserializers();
                }
                else if(UpdateEmailRole != null)
                {
                    return UpdateEmailRole.GetFieldDeserializers();
                }
                else if(WithRolePatchRequestBodyUpdateApplicationRole != null)
                {
                    return WithRolePatchRequestBodyUpdateApplicationRole.GetFieldDeserializers();
                }
                else if(WithRolePatchRequestBodyUpdateBackupRole != null)
                {
                    return WithRolePatchRequestBodyUpdateBackupRole.GetFieldDeserializers();
                }
                else if(WithRolePatchRequestBodyUpdateDatabaseRole != null)
                {
                    return WithRolePatchRequestBodyUpdateDatabaseRole.GetFieldDeserializers();
                }
                else if(WithRolePatchRequestBodyUpdateDnsRole != null)
                {
                    return WithRolePatchRequestBodyUpdateDnsRole.GetFieldDeserializers();
                }
                else if(WithRolePatchRequestBodyUpdateEmailRole != null)
                {
                    return WithRolePatchRequestBodyUpdateEmailRole.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(UpdateApplicationRole != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.UpdateApplicationRole>(null, UpdateApplicationRole);
                }
                else if(UpdateBackupRole != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.UpdateBackupRole>(null, UpdateBackupRole);
                }
                else if(UpdateDatabaseRole != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.UpdateDatabaseRole>(null, UpdateDatabaseRole);
                }
                else if(UpdateDnsRole != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.UpdateDnsRole>(null, UpdateDnsRole);
                }
                else if(UpdateEmailRole != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.UpdateEmailRole>(null, UpdateEmailRole);
                }
                else if(WithRolePatchRequestBodyUpdateApplicationRole != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.UpdateApplicationRole>(null, WithRolePatchRequestBodyUpdateApplicationRole);
                }
                else if(WithRolePatchRequestBodyUpdateBackupRole != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.UpdateBackupRole>(null, WithRolePatchRequestBodyUpdateBackupRole);
                }
                else if(WithRolePatchRequestBodyUpdateDatabaseRole != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.UpdateDatabaseRole>(null, WithRolePatchRequestBodyUpdateDatabaseRole);
                }
                else if(WithRolePatchRequestBodyUpdateDnsRole != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.UpdateDnsRole>(null, WithRolePatchRequestBodyUpdateDnsRole);
                }
                else if(WithRolePatchRequestBodyUpdateEmailRole != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.UpdateEmailRole>(null, WithRolePatchRequestBodyUpdateEmailRole);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Enhance.Client.Models.ApplicationRoleInfo"/>, <see cref="global::Enhance.Client.Models.BackupRoleInfo"/>, <see cref="global::Enhance.Client.Models.DatabaseRoleInfo"/>, <see cref="global::Enhance.Client.Models.DnsRoleInfo"/>, <see cref="global::Enhance.Client.Models.EmailRoleInfo"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithRoleResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.ApplicationRoleInfo"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.ApplicationRoleInfo? ApplicationRoleInfo { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.ApplicationRoleInfo ApplicationRoleInfo { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.BackupRoleInfo"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.BackupRoleInfo? BackupRoleInfo { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.BackupRoleInfo BackupRoleInfo { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.DatabaseRoleInfo"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.DatabaseRoleInfo? DatabaseRoleInfo { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.DatabaseRoleInfo DatabaseRoleInfo { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.DnsRoleInfo"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.DnsRoleInfo? DnsRoleInfo { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.DnsRoleInfo DnsRoleInfo { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.EmailRoleInfo"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.EmailRoleInfo? EmailRoleInfo { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.EmailRoleInfo EmailRoleInfo { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Enhance.Client.Servers.Item.Roles.Item.WithRoleItemRequestBuilder.WithRoleResponse();
                if("ApplicationRoleInfo".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ApplicationRoleInfo = new global::Enhance.Client.Models.ApplicationRoleInfo();
                }
                else if("BackupRoleInfo".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.BackupRoleInfo = new global::Enhance.Client.Models.BackupRoleInfo();
                }
                else if("DatabaseRoleInfo".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DatabaseRoleInfo = new global::Enhance.Client.Models.DatabaseRoleInfo();
                }
                else if("DnsRoleInfo".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DnsRoleInfo = new global::Enhance.Client.Models.DnsRoleInfo();
                }
                else if("EmailRoleInfo".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.EmailRoleInfo = new global::Enhance.Client.Models.EmailRoleInfo();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(ApplicationRoleInfo != null)
                {
                    return ApplicationRoleInfo.GetFieldDeserializers();
                }
                else if(BackupRoleInfo != null)
                {
                    return BackupRoleInfo.GetFieldDeserializers();
                }
                else if(DatabaseRoleInfo != null)
                {
                    return DatabaseRoleInfo.GetFieldDeserializers();
                }
                else if(DnsRoleInfo != null)
                {
                    return DnsRoleInfo.GetFieldDeserializers();
                }
                else if(EmailRoleInfo != null)
                {
                    return EmailRoleInfo.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ApplicationRoleInfo != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.ApplicationRoleInfo>(null, ApplicationRoleInfo);
                }
                else if(BackupRoleInfo != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.BackupRoleInfo>(null, BackupRoleInfo);
                }
                else if(DatabaseRoleInfo != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.DatabaseRoleInfo>(null, DatabaseRoleInfo);
                }
                else if(DnsRoleInfo != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.DnsRoleInfo>(null, DnsRoleInfo);
                }
                else if(EmailRoleInfo != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.EmailRoleInfo>(null, EmailRoleInfo);
                }
            }
        }
    }
}
#pragma warning restore CS0618
