// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Invites.Item.Validate;
using Enhance.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.Invites.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \invites\{invite_id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class WithInvite_ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The validate property</summary>
        public global::Enhance.Client.Invites.Item.Validate.ValidateRequestBuilder Validate
        {
            get => new global::Enhance.Client.Invites.Item.Validate.ValidateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Invites.Item.WithInvite_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithInvite_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/invites/{invite_id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Invites.Item.WithInvite_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithInvite_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/invites/{invite_id}", rawUrl)
        {
        }
        /// <summary>
        /// Accepts the invite.There are four cases that need to be handled:No login session is present, user is newly invited and does not yet have a password. The password submitted in the body is set on the new user and the login&apos;s member is marked as active within the organization. A session is created and set in the returned cookie.No login session is present but user already exists and has a password. The password submitted in the request body is used to validate the login and the login&apos;s member is marked as active within the organization. A session is created and set in the returned cookie.A login session is present for the user to whom the invite belongs. The user is marked active within the organisation to which it was invited.A login session is present for a login to whom the invite does not belong, resulting in an error.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PostAsync(global::Enhance.Client.Models.AcceptInviteBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PostAsync(global::Enhance.Client.Models.AcceptInviteBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Accepts the invite.There are four cases that need to be handled:No login session is present, user is newly invited and does not yet have a password. The password submitted in the body is set on the new user and the login&apos;s member is marked as active within the organization. A session is created and set in the returned cookie.No login session is present but user already exists and has a password. The password submitted in the request body is used to validate the login and the login&apos;s member is marked as active within the organization. A session is created and set in the returned cookie.A login session is present for the user to whom the invite belongs. The user is marked active within the organisation to which it was invited.A login session is present for a login to whom the invite does not belong, resulting in an error.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.AcceptInviteBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.AcceptInviteBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Invites.Item.WithInvite_ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.Invites.Item.WithInvite_ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.Invites.Item.WithInvite_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithInvite_ItemRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
