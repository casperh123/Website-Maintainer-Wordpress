// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class Email : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>The aliases property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Aliases { get; set; }
#nullable restore
#else
        public List<string> Aliases { get; set; }
#endif
        /// <summary>The autorespondersCount property</summary>
        public int? AutorespondersCount { get; set; }
        /// <summary>The createdAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>The domainId property</summary>
        public Guid? DomainId { get; set; }
        /// <summary>The emailKind property</summary>
        public global::Enhance.Client.Models.Email_emailKind? EmailKind { get; set; }
        /// <summary>The forwardersCount property</summary>
        public int? ForwardersCount { get; set; }
        /// <summary>The hasMailbox property</summary>
        public bool? HasMailbox { get; set; }
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>The mailboxName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MailboxName { get; set; }
#nullable restore
#else
        public string MailboxName { get; set; }
#endif
        /// <summary>The quota property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.Quota? Quota { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.Quota Quota { get; set; }
#endif
        /// <summary>The status property</summary>
        public global::Enhance.Client.Models.EmailStatus? Status { get; set; }
        /// <summary>The websiteId property</summary>
        public Guid? WebsiteId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.Email"/> and sets the default values.
        /// </summary>
        public Email()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.Email"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.Email CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.Email();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "address", n => { Address = n.GetStringValue(); } },
                { "aliases", n => { Aliases = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "autorespondersCount", n => { AutorespondersCount = n.GetIntValue(); } },
                { "createdAt", n => { CreatedAt = n.GetStringValue(); } },
                { "domainId", n => { DomainId = n.GetGuidValue(); } },
                { "emailKind", n => { EmailKind = n.GetEnumValue<global::Enhance.Client.Models.Email_emailKind>(); } },
                { "forwardersCount", n => { ForwardersCount = n.GetIntValue(); } },
                { "hasMailbox", n => { HasMailbox = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "mailboxName", n => { MailboxName = n.GetStringValue(); } },
                { "quota", n => { Quota = n.GetObjectValue<global::Enhance.Client.Models.Quota>(global::Enhance.Client.Models.Quota.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::Enhance.Client.Models.EmailStatus>(); } },
                { "websiteId", n => { WebsiteId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("address", Address);
            writer.WriteCollectionOfPrimitiveValues<string>("aliases", Aliases);
            writer.WriteIntValue("autorespondersCount", AutorespondersCount);
            writer.WriteStringValue("createdAt", CreatedAt);
            writer.WriteGuidValue("domainId", DomainId);
            writer.WriteEnumValue<global::Enhance.Client.Models.Email_emailKind>("emailKind", EmailKind);
            writer.WriteIntValue("forwardersCount", ForwardersCount);
            writer.WriteBoolValue("hasMailbox", HasMailbox);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("mailboxName", MailboxName);
            writer.WriteObjectValue<global::Enhance.Client.Models.Quota>("quota", Quota);
            writer.WriteEnumValue<global::Enhance.Client.Models.EmailStatus>("status", Status);
            writer.WriteGuidValue("websiteId", WebsiteId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
