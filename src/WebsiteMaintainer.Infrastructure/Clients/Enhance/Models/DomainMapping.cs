// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class DomainMapping : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The cert property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.DomainSslCert? Cert { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.DomainSslCert Cert { get; set; }
#endif
        /// <summary>The cloudflareFriendlyName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CloudflareFriendlyName { get; set; }
#nullable restore
#else
        public string CloudflareFriendlyName { get; set; }
#endif
        /// <summary>The cloudflareStatus property</summary>
        public global::Enhance.Client.Models.CloudFlareStatus? CloudflareStatus { get; set; }
        /// <summary>The cloudflareTokenId property</summary>
        public Guid? CloudflareTokenId { get; set; }
        /// <summary>The documentRoot property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocumentRoot { get; set; }
#nullable restore
#else
        public string DocumentRoot { get; set; }
#endif
        /// <summary>The domain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Domain { get; set; }
#nullable restore
#else
        public string Domain { get; set; }
#endif
        /// <summary>The domainId property</summary>
        public Guid? DomainId { get; set; }
        /// <summary>The mappingKind property</summary>
        public global::Enhance.Client.Models.DomainMappingKind? MappingKind { get; set; }
        /// <summary>The websiteId property</summary>
        public Guid? WebsiteId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.DomainMapping"/> and sets the default values.
        /// </summary>
        public DomainMapping()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.DomainMapping"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.DomainMapping CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.DomainMapping();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cert", n => { Cert = n.GetObjectValue<global::Enhance.Client.Models.DomainSslCert>(global::Enhance.Client.Models.DomainSslCert.CreateFromDiscriminatorValue); } },
                { "cloudflareFriendlyName", n => { CloudflareFriendlyName = n.GetStringValue(); } },
                { "cloudflareStatus", n => { CloudflareStatus = n.GetEnumValue<global::Enhance.Client.Models.CloudFlareStatus>(); } },
                { "cloudflareTokenId", n => { CloudflareTokenId = n.GetGuidValue(); } },
                { "documentRoot", n => { DocumentRoot = n.GetStringValue(); } },
                { "domain", n => { Domain = n.GetStringValue(); } },
                { "domainId", n => { DomainId = n.GetGuidValue(); } },
                { "mappingKind", n => { MappingKind = n.GetEnumValue<global::Enhance.Client.Models.DomainMappingKind>(); } },
                { "websiteId", n => { WebsiteId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Enhance.Client.Models.DomainSslCert>("cert", Cert);
            writer.WriteStringValue("cloudflareFriendlyName", CloudflareFriendlyName);
            writer.WriteEnumValue<global::Enhance.Client.Models.CloudFlareStatus>("cloudflareStatus", CloudflareStatus);
            writer.WriteGuidValue("cloudflareTokenId", CloudflareTokenId);
            writer.WriteStringValue("documentRoot", DocumentRoot);
            writer.WriteStringValue("domain", Domain);
            writer.WriteGuidValue("domainId", DomainId);
            writer.WriteEnumValue<global::Enhance.Client.Models.DomainMappingKind>("mappingKind", MappingKind);
            writer.WriteGuidValue("websiteId", WebsiteId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
