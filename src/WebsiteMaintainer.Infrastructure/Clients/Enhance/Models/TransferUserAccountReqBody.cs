// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class TransferUserAccountReqBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allowPartialSync property</summary>
        public bool? AllowPartialSync { get; set; }
        /// <summary>The appServerId property</summary>
        public Guid? AppServerId { get; set; }
        /// <summary>The asUserRoot property</summary>
        public bool? AsUserRoot { get; set; }
        /// <summary>The backupServerId property</summary>
        public Guid? BackupServerId { get; set; }
        /// <summary>The dbServerId property</summary>
        public Guid? DbServerId { get; set; }
        /// <summary>The emailServerId property</summary>
        public Guid? EmailServerId { get; set; }
        /// <summary>The subscriptionId property</summary>
        public int? SubscriptionId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.TransferUserAccountReqBody"/> and sets the default values.
        /// </summary>
        public TransferUserAccountReqBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.TransferUserAccountReqBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.TransferUserAccountReqBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.TransferUserAccountReqBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowPartialSync", n => { AllowPartialSync = n.GetBoolValue(); } },
                { "appServerId", n => { AppServerId = n.GetGuidValue(); } },
                { "asUserRoot", n => { AsUserRoot = n.GetBoolValue(); } },
                { "backupServerId", n => { BackupServerId = n.GetGuidValue(); } },
                { "dbServerId", n => { DbServerId = n.GetGuidValue(); } },
                { "emailServerId", n => { EmailServerId = n.GetGuidValue(); } },
                { "subscriptionId", n => { SubscriptionId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allowPartialSync", AllowPartialSync);
            writer.WriteGuidValue("appServerId", AppServerId);
            writer.WriteBoolValue("asUserRoot", AsUserRoot);
            writer.WriteGuidValue("backupServerId", BackupServerId);
            writer.WriteGuidValue("dbServerId", DbServerId);
            writer.WriteGuidValue("emailServerId", EmailServerId);
            writer.WriteIntValue("subscriptionId", SubscriptionId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
