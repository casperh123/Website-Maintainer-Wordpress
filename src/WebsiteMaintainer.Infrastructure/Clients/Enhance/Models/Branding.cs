// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class Branding : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The controlPanelDomain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ControlPanelDomain { get; set; }
#nullable restore
#else
        public string ControlPanelDomain { get; set; }
#endif
        /// <summary>The faviconPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FaviconPath { get; set; }
#nullable restore
#else
        public string FaviconPath { get; set; }
#endif
        /// <summary>The inverseIconPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InverseIconPath { get; set; }
#nullable restore
#else
        public string InverseIconPath { get; set; }
#endif
        /// <summary>The inverseLogoPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InverseLogoPath { get; set; }
#nullable restore
#else
        public string InverseLogoPath { get; set; }
#endif
        /// <summary>The locale property</summary>
        public global::Enhance.Client.Models.CPLocale? Locale { get; set; }
        /// <summary>The loginImagePath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LoginImagePath { get; set; }
#nullable restore
#else
        public string LoginImagePath { get; set; }
#endif
        /// <summary>The logoPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoPath { get; set; }
#nullable restore
#else
        public string LogoPath { get; set; }
#endif
        /// <summary>The nameServers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? NameServers { get; set; }
#nullable restore
#else
        public List<string> NameServers { get; set; }
#endif
        /// <summary>The orgName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrgName { get; set; }
#nullable restore
#else
        public string OrgName { get; set; }
#endif
        /// <summary>The parent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Parent { get; set; }
#nullable restore
#else
        public string Parent { get; set; }
#endif
        /// <summary>The phpMyAdminDomain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PhpMyAdminDomain { get; set; }
#nullable restore
#else
        public string PhpMyAdminDomain { get; set; }
#endif
        /// <summary>The roundcubeDomain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoundcubeDomain { get; set; }
#nullable restore
#else
        public string RoundcubeDomain { get; set; }
#endif
        /// <summary>The settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.Setting>? Settings { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.Setting> Settings { get; set; }
#endif
        /// <summary>The stagingDomain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StagingDomain { get; set; }
#nullable restore
#else
        public string StagingDomain { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.Branding"/> and sets the default values.
        /// </summary>
        public Branding()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.Branding"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.Branding CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.Branding();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "controlPanelDomain", n => { ControlPanelDomain = n.GetStringValue(); } },
                { "faviconPath", n => { FaviconPath = n.GetStringValue(); } },
                { "inverseIconPath", n => { InverseIconPath = n.GetStringValue(); } },
                { "inverseLogoPath", n => { InverseLogoPath = n.GetStringValue(); } },
                { "locale", n => { Locale = n.GetEnumValue<global::Enhance.Client.Models.CPLocale>(); } },
                { "loginImagePath", n => { LoginImagePath = n.GetStringValue(); } },
                { "logoPath", n => { LogoPath = n.GetStringValue(); } },
                { "nameServers", n => { NameServers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "orgName", n => { OrgName = n.GetStringValue(); } },
                { "parent", n => { Parent = n.GetStringValue(); } },
                { "phpMyAdminDomain", n => { PhpMyAdminDomain = n.GetStringValue(); } },
                { "roundcubeDomain", n => { RoundcubeDomain = n.GetStringValue(); } },
                { "settings", n => { Settings = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.Setting>(global::Enhance.Client.Models.Setting.CreateFromDiscriminatorValue)?.AsList(); } },
                { "stagingDomain", n => { StagingDomain = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("controlPanelDomain", ControlPanelDomain);
            writer.WriteStringValue("faviconPath", FaviconPath);
            writer.WriteStringValue("inverseIconPath", InverseIconPath);
            writer.WriteStringValue("inverseLogoPath", InverseLogoPath);
            writer.WriteEnumValue<global::Enhance.Client.Models.CPLocale>("locale", Locale);
            writer.WriteStringValue("loginImagePath", LoginImagePath);
            writer.WriteStringValue("logoPath", LogoPath);
            writer.WriteCollectionOfPrimitiveValues<string>("nameServers", NameServers);
            writer.WriteStringValue("orgName", OrgName);
            writer.WriteStringValue("parent", Parent);
            writer.WriteStringValue("phpMyAdminDomain", PhpMyAdminDomain);
            writer.WriteStringValue("roundcubeDomain", RoundcubeDomain);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.Setting>("settings", Settings);
            writer.WriteStringValue("stagingDomain", StagingDomain);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
