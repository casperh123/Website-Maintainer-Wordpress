// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="global::Enhance.Client.Models.WpDebug"/>, <see cref="global::Enhance.Client.Models.WpDebugDisplay"/>, <see cref="global::Enhance.Client.Models.WpDebugLog"/>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class WordpressConfig : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.WpDebug"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.WpDebug? WordpressConfigWpDebug { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.WpDebug WordpressConfigWpDebug { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.WpDebug"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.WpDebug? WordpressConfigWpDebug0 { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.WpDebug WordpressConfigWpDebug0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.WpDebugDisplay"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.WpDebugDisplay? WordpressConfigWpDebugDisplay { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.WpDebugDisplay WordpressConfigWpDebugDisplay { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.WpDebugDisplay"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.WpDebugDisplay? WordpressConfigWpDebugDisplay0 { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.WpDebugDisplay WordpressConfigWpDebugDisplay0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.WpDebugLog"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.WpDebugLog? WordpressConfigWpDebugLog { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.WpDebugLog WordpressConfigWpDebugLog { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.WpDebugLog"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.WpDebugLog? WordpressConfigWpDebugLog0 { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.WpDebugLog WordpressConfigWpDebugLog0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.WpDebug"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.WpDebug? WpDebug { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.WpDebug WpDebug { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.WpDebugDisplay"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.WpDebugDisplay? WpDebugDisplay { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.WpDebugDisplay WpDebugDisplay { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.WpDebugLog"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.WpDebugLog? WpDebugLog { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.WpDebugLog WpDebugLog { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.WordpressConfig"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.WordpressConfig CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
            var result = new global::Enhance.Client.Models.WordpressConfig();
            if("WpDebug".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WordpressConfigWpDebug = new global::Enhance.Client.Models.WpDebug();
            }
            else if("WpDebug".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WordpressConfigWpDebug0 = new global::Enhance.Client.Models.WpDebug();
            }
            else if("WpDebugDisplay".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WordpressConfigWpDebugDisplay = new global::Enhance.Client.Models.WpDebugDisplay();
            }
            else if("WpDebugDisplay".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WordpressConfigWpDebugDisplay0 = new global::Enhance.Client.Models.WpDebugDisplay();
            }
            else if("WpDebugLog".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WordpressConfigWpDebugLog = new global::Enhance.Client.Models.WpDebugLog();
            }
            else if("WpDebugLog".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WordpressConfigWpDebugLog0 = new global::Enhance.Client.Models.WpDebugLog();
            }
            else if("WpDebug".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WpDebug = new global::Enhance.Client.Models.WpDebug();
            }
            else if("WpDebugDisplay".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WpDebugDisplay = new global::Enhance.Client.Models.WpDebugDisplay();
            }
            else if("WpDebugLog".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.WpDebugLog = new global::Enhance.Client.Models.WpDebugLog();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(WordpressConfigWpDebug != null)
            {
                return WordpressConfigWpDebug.GetFieldDeserializers();
            }
            else if(WordpressConfigWpDebug0 != null)
            {
                return WordpressConfigWpDebug0.GetFieldDeserializers();
            }
            else if(WordpressConfigWpDebugDisplay != null)
            {
                return WordpressConfigWpDebugDisplay.GetFieldDeserializers();
            }
            else if(WordpressConfigWpDebugDisplay0 != null)
            {
                return WordpressConfigWpDebugDisplay0.GetFieldDeserializers();
            }
            else if(WordpressConfigWpDebugLog != null)
            {
                return WordpressConfigWpDebugLog.GetFieldDeserializers();
            }
            else if(WordpressConfigWpDebugLog0 != null)
            {
                return WordpressConfigWpDebugLog0.GetFieldDeserializers();
            }
            else if(WpDebug != null)
            {
                return WpDebug.GetFieldDeserializers();
            }
            else if(WpDebugDisplay != null)
            {
                return WpDebugDisplay.GetFieldDeserializers();
            }
            else if(WpDebugLog != null)
            {
                return WpDebugLog.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(WordpressConfigWpDebug != null)
            {
                writer.WriteObjectValue<global::Enhance.Client.Models.WpDebug>(null, WordpressConfigWpDebug);
            }
            else if(WordpressConfigWpDebug0 != null)
            {
                writer.WriteObjectValue<global::Enhance.Client.Models.WpDebug>(null, WordpressConfigWpDebug0);
            }
            else if(WordpressConfigWpDebugDisplay != null)
            {
                writer.WriteObjectValue<global::Enhance.Client.Models.WpDebugDisplay>(null, WordpressConfigWpDebugDisplay);
            }
            else if(WordpressConfigWpDebugDisplay0 != null)
            {
                writer.WriteObjectValue<global::Enhance.Client.Models.WpDebugDisplay>(null, WordpressConfigWpDebugDisplay0);
            }
            else if(WordpressConfigWpDebugLog != null)
            {
                writer.WriteObjectValue<global::Enhance.Client.Models.WpDebugLog>(null, WordpressConfigWpDebugLog);
            }
            else if(WordpressConfigWpDebugLog0 != null)
            {
                writer.WriteObjectValue<global::Enhance.Client.Models.WpDebugLog>(null, WordpressConfigWpDebugLog0);
            }
            else if(WpDebug != null)
            {
                writer.WriteObjectValue<global::Enhance.Client.Models.WpDebug>(null, WpDebug);
            }
            else if(WpDebugDisplay != null)
            {
                writer.WriteObjectValue<global::Enhance.Client.Models.WpDebugDisplay>(null, WpDebugDisplay);
            }
            else if(WpDebugLog != null)
            {
                writer.WriteObjectValue<global::Enhance.Client.Models.WpDebugLog>(null, WpDebugLog);
            }
        }
    }
}
#pragma warning restore CS0618
