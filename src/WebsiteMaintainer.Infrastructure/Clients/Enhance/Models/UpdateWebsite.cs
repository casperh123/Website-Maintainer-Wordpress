// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class UpdateWebsite : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The isSuspended property</summary>
        public bool? IsSuspended { get; set; }
        /// <summary>The orgId property</summary>
        public Guid? OrgId { get; set; }
        /// <summary>The phpVersion property</summary>
        public global::Enhance.Client.Models.PhpVersion? PhpVersion { get; set; }
        /// <summary>The status property</summary>
        public global::Enhance.Client.Models.WebsiteStatus? Status { get; set; }
        /// <summary>The website can be moved to another subscription within the organization by setting this field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.UpdateWebsite.UpdateWebsite_subscriptionId? SubscriptionId { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.UpdateWebsite.UpdateWebsite_subscriptionId SubscriptionId { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? Tags { get; set; }
#nullable restore
#else
        public List<int?> Tags { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.UpdateWebsite"/> and sets the default values.
        /// </summary>
        public UpdateWebsite()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.UpdateWebsite"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.UpdateWebsite CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.UpdateWebsite();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "isSuspended", n => { IsSuspended = n.GetBoolValue(); } },
                { "orgId", n => { OrgId = n.GetGuidValue(); } },
                { "phpVersion", n => { PhpVersion = n.GetEnumValue<global::Enhance.Client.Models.PhpVersion>(); } },
                { "status", n => { Status = n.GetEnumValue<global::Enhance.Client.Models.WebsiteStatus>(); } },
                { "subscriptionId", n => { SubscriptionId = n.GetObjectValue<global::Enhance.Client.Models.UpdateWebsite.UpdateWebsite_subscriptionId>(global::Enhance.Client.Models.UpdateWebsite.UpdateWebsite_subscriptionId.CreateFromDiscriminatorValue); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("isSuspended", IsSuspended);
            writer.WriteGuidValue("orgId", OrgId);
            writer.WriteEnumValue<global::Enhance.Client.Models.PhpVersion>("phpVersion", PhpVersion);
            writer.WriteEnumValue<global::Enhance.Client.Models.WebsiteStatus>("status", Status);
            writer.WriteObjectValue<global::Enhance.Client.Models.UpdateWebsite.UpdateWebsite_subscriptionId>("subscriptionId", SubscriptionId);
            writer.WriteCollectionOfPrimitiveValues<int?>("tags", Tags);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Enhance.Client.Models.Unset"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class UpdateWebsite_subscriptionId : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.Unset"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.Unset? Unset { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.Unset Unset { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Enhance.Client.Models.UpdateWebsite.UpdateWebsite_subscriptionId"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Enhance.Client.Models.UpdateWebsite.UpdateWebsite_subscriptionId CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Enhance.Client.Models.UpdateWebsite.UpdateWebsite_subscriptionId();
                if("Unset".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.Unset = new global::Enhance.Client.Models.Unset();
                }
                else if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Unset != null)
                {
                    return Unset.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Unset != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.Unset>(null, Unset);
                }
                else if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
            }
        }
    }
}
#pragma warning restore CS0618
