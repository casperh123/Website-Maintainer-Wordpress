// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class NewPlan : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allowances property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.Allowance>? Allowances { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.Allowance> Allowances { get; set; }
#endif
        /// <summary>The allowedPhpVersions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.PhpVersion?>? AllowedPhpVersions { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.PhpVersion?> AllowedPhpVersions { get; set; }
#endif
        /// <summary>The allowServerGroupSelection property</summary>
        public bool? AllowServerGroupSelection { get; set; }
        /// <summary>The cgroupLimits property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.CgroupLimits? CgroupLimits { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.CgroupLimits CgroupLimits { get; set; }
#endif
        /// <summary>The defaultPhpVersion property</summary>
        public global::Enhance.Client.Models.PhpVersion? DefaultPhpVersion { get; set; }
        /// <summary>If set, servers from this server group are prioritized by placement algorithm. If no server from the default server group is available, servers from other server groups are tried. The defaultServerGroupId will be automatically added to serverGroupIds if they do not contain it or are not provided.</summary>
        public Guid? DefaultServerGroupId { get; set; }
        /// <summary>File system quota settings in bytes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.FsQuotaLimit? FsQuotaLimit { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.FsQuotaLimit FsQuotaLimit { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The planType property</summary>
        public global::Enhance.Client.Models.PlanType? PlanType { get; set; }
        /// <summary>:&gt; When WordPress is installed on a website under this plan, the chosen theme will be preinstalled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreinstallWordpressTheme { get; set; }
#nullable restore
#else
        public string PreinstallWordpressTheme { get; set; }
#endif
        /// <summary>The redisAllowed property</summary>
        public bool? RedisAllowed { get; set; }
        /// <summary>The resources property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.Resource>? Resources { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.Resource> Resources { get; set; }
#endif
        /// <summary>The selections property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.Selection>? Selections { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.Selection> Selections { get; set; }
#endif
        /// <summary>The serverGroupId property</summary>
        [Obsolete("")]
        public Guid? ServerGroupId { get; set; }
        /// <summary>The serverGroupIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? ServerGroupIds { get; set; }
#nullable restore
#else
        public List<Guid?> ServerGroupIds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.NewPlan"/> and sets the default values.
        /// </summary>
        public NewPlan()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.NewPlan"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.NewPlan CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.NewPlan();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowServerGroupSelection", n => { AllowServerGroupSelection = n.GetBoolValue(); } },
                { "allowances", n => { Allowances = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.Allowance>(global::Enhance.Client.Models.Allowance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "allowedPhpVersions", n => { AllowedPhpVersions = n.GetCollectionOfEnumValues<global::Enhance.Client.Models.PhpVersion>()?.AsList(); } },
                { "cgroupLimits", n => { CgroupLimits = n.GetObjectValue<global::Enhance.Client.Models.CgroupLimits>(global::Enhance.Client.Models.CgroupLimits.CreateFromDiscriminatorValue); } },
                { "defaultPhpVersion", n => { DefaultPhpVersion = n.GetEnumValue<global::Enhance.Client.Models.PhpVersion>(); } },
                { "defaultServerGroupId", n => { DefaultServerGroupId = n.GetGuidValue(); } },
                { "fsQuotaLimit", n => { FsQuotaLimit = n.GetObjectValue<global::Enhance.Client.Models.FsQuotaLimit>(global::Enhance.Client.Models.FsQuotaLimit.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "planType", n => { PlanType = n.GetEnumValue<global::Enhance.Client.Models.PlanType>(); } },
                { "preinstallWordpressTheme", n => { PreinstallWordpressTheme = n.GetStringValue(); } },
                { "redisAllowed", n => { RedisAllowed = n.GetBoolValue(); } },
                { "resources", n => { Resources = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.Resource>(global::Enhance.Client.Models.Resource.CreateFromDiscriminatorValue)?.AsList(); } },
                { "selections", n => { Selections = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.Selection>(global::Enhance.Client.Models.Selection.CreateFromDiscriminatorValue)?.AsList(); } },
                { "serverGroupId", n => { ServerGroupId = n.GetGuidValue(); } },
                { "serverGroupIds", n => { ServerGroupIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.Allowance>("allowances", Allowances);
            writer.WriteCollectionOfEnumValues<global::Enhance.Client.Models.PhpVersion>("allowedPhpVersions", AllowedPhpVersions);
            writer.WriteBoolValue("allowServerGroupSelection", AllowServerGroupSelection);
            writer.WriteObjectValue<global::Enhance.Client.Models.CgroupLimits>("cgroupLimits", CgroupLimits);
            writer.WriteEnumValue<global::Enhance.Client.Models.PhpVersion>("defaultPhpVersion", DefaultPhpVersion);
            writer.WriteGuidValue("defaultServerGroupId", DefaultServerGroupId);
            writer.WriteObjectValue<global::Enhance.Client.Models.FsQuotaLimit>("fsQuotaLimit", FsQuotaLimit);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Enhance.Client.Models.PlanType>("planType", PlanType);
            writer.WriteStringValue("preinstallWordpressTheme", PreinstallWordpressTheme);
            writer.WriteBoolValue("redisAllowed", RedisAllowed);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.Resource>("resources", Resources);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.Selection>("selections", Selections);
            writer.WriteGuidValue("serverGroupId", ServerGroupId);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("serverGroupIds", ServerGroupIds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
