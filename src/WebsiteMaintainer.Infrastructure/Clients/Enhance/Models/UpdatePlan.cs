// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class UpdatePlan : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allowedPhpVersions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.PhpVersion?>? AllowedPhpVersions { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.PhpVersion?> AllowedPhpVersions { get; set; }
#endif
        /// <summary>Whether the customer can select the server group for their websites.</summary>
        public bool? AllowServerGroupSelection { get; set; }
        /// <summary>The cgroupLimits property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.CgroupLimits? CgroupLimits { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.CgroupLimits CgroupLimits { get; set; }
#endif
        /// <summary>The defaultPhpVersion property</summary>
        public global::Enhance.Client.Models.PhpVersion? DefaultPhpVersion { get; set; }
        /// <summary>If set, servers from this server group are prioritized by placement algorithm. If no server from the default server group is available, servers from other server groups are tried. If both serverGroupIds and defaultServerGroupId is provided, defaultServerGroupId will be added to serverGroupIds if not there. If only defaultServerGroupId is provided, already existing plan&apos;s serverGroupIds will be expanded with defaultServerGroupId if not there yet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.UpdatePlan.UpdatePlan_defaultServerGroupId? DefaultServerGroupId { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.UpdatePlan.UpdatePlan_defaultServerGroupId DefaultServerGroupId { get; set; }
#endif
        /// <summary>File system quota settings in bytes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.FsQuotaLimit? FsQuotaLimit { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.FsQuotaLimit FsQuotaLimit { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The planType property</summary>
        public global::Enhance.Client.Models.PlanType? PlanType { get; set; }
        /// <summary>:&gt; When WordPress is installed on a website under this plan, the chosen theme will be preinstalled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreinstallWordpressTheme { get; set; }
#nullable restore
#else
        public string PreinstallWordpressTheme { get; set; }
#endif
        /// <summary>The redisAllowed property</summary>
        public bool? RedisAllowed { get; set; }
        /// <summary>If provided as an empty array, removes all server groups from the plan.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? ServerGroupIds { get; set; }
#nullable restore
#else
        public List<Guid?> ServerGroupIds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.UpdatePlan"/> and sets the default values.
        /// </summary>
        public UpdatePlan()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.UpdatePlan"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.UpdatePlan CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.UpdatePlan();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowServerGroupSelection", n => { AllowServerGroupSelection = n.GetBoolValue(); } },
                { "allowedPhpVersions", n => { AllowedPhpVersions = n.GetCollectionOfEnumValues<global::Enhance.Client.Models.PhpVersion>()?.AsList(); } },
                { "cgroupLimits", n => { CgroupLimits = n.GetObjectValue<global::Enhance.Client.Models.CgroupLimits>(global::Enhance.Client.Models.CgroupLimits.CreateFromDiscriminatorValue); } },
                { "defaultPhpVersion", n => { DefaultPhpVersion = n.GetEnumValue<global::Enhance.Client.Models.PhpVersion>(); } },
                { "defaultServerGroupId", n => { DefaultServerGroupId = n.GetObjectValue<global::Enhance.Client.Models.UpdatePlan.UpdatePlan_defaultServerGroupId>(global::Enhance.Client.Models.UpdatePlan.UpdatePlan_defaultServerGroupId.CreateFromDiscriminatorValue); } },
                { "fsQuotaLimit", n => { FsQuotaLimit = n.GetObjectValue<global::Enhance.Client.Models.FsQuotaLimit>(global::Enhance.Client.Models.FsQuotaLimit.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "planType", n => { PlanType = n.GetEnumValue<global::Enhance.Client.Models.PlanType>(); } },
                { "preinstallWordpressTheme", n => { PreinstallWordpressTheme = n.GetStringValue(); } },
                { "redisAllowed", n => { RedisAllowed = n.GetBoolValue(); } },
                { "serverGroupIds", n => { ServerGroupIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfEnumValues<global::Enhance.Client.Models.PhpVersion>("allowedPhpVersions", AllowedPhpVersions);
            writer.WriteBoolValue("allowServerGroupSelection", AllowServerGroupSelection);
            writer.WriteObjectValue<global::Enhance.Client.Models.CgroupLimits>("cgroupLimits", CgroupLimits);
            writer.WriteEnumValue<global::Enhance.Client.Models.PhpVersion>("defaultPhpVersion", DefaultPhpVersion);
            writer.WriteObjectValue<global::Enhance.Client.Models.UpdatePlan.UpdatePlan_defaultServerGroupId>("defaultServerGroupId", DefaultServerGroupId);
            writer.WriteObjectValue<global::Enhance.Client.Models.FsQuotaLimit>("fsQuotaLimit", FsQuotaLimit);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Enhance.Client.Models.PlanType>("planType", PlanType);
            writer.WriteStringValue("preinstallWordpressTheme", PreinstallWordpressTheme);
            writer.WriteBoolValue("redisAllowed", RedisAllowed);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("serverGroupIds", ServerGroupIds);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Enhance.Client.Models.Unset"/>, <see cref="Guid"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class UpdatePlan_defaultServerGroupId : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="Guid"/></summary>
            public Guid? Guid { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Models.Unset"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Models.Unset? Unset { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Models.Unset Unset { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Enhance.Client.Models.UpdatePlan.UpdatePlan_defaultServerGroupId"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Enhance.Client.Models.UpdatePlan.UpdatePlan_defaultServerGroupId CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Enhance.Client.Models.UpdatePlan.UpdatePlan_defaultServerGroupId();
                if("Unset".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.Unset = new global::Enhance.Client.Models.Unset();
                }
                else if(parseNode.GetGuidValue() is Guid guidValue)
                {
                    result.Guid = guidValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Unset != null)
                {
                    return Unset.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Unset != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Models.Unset>(null, Unset);
                }
                else if(Guid != null)
                {
                    writer.WriteGuidValue(null, Guid);
                }
            }
        }
    }
}
#pragma warning restore CS0618
