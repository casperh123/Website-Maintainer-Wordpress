// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class ServerInfo : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The controldVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ControldVersion { get; set; }
#nullable restore
#else
        public string ControldVersion { get; set; }
#endif
        /// <summary>The createdAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>The dedicatedSubscription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.DedicatedSubscriptionInfo? DedicatedSubscription { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.DedicatedSubscriptionInfo DedicatedSubscription { get; set; }
#endif
        /// <summary>The disks property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.Disk>? Disks { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.Disk> Disks { get; set; }
#endif
        /// <summary>The friendlyName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FriendlyName { get; set; }
#nullable restore
#else
        public string FriendlyName { get; set; }
#endif
        /// <summary>The groupId property</summary>
        public Guid? GroupId { get; set; }
        /// <summary>The hostname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hostname { get; set; }
#nullable restore
#else
        public string Hostname { get; set; }
#endif
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>The ips property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.ServerIp>? Ips { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.ServerIp> Ips { get; set; }
#endif
        /// <summary>The ipv6Addr property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ipv6Addr { get; set; }
#nullable restore
#else
        public string Ipv6Addr { get; set; }
#endif
        /// <summary>The isConfigured property</summary>
        public bool? IsConfigured { get; set; }
        /// <summary>The isControlPanel property</summary>
        public bool? IsControlPanel { get; set; }
        /// <summary>The isDecommissioned property</summary>
        public bool? IsDecommissioned { get; set; }
        /// <summary>The osUsage property</summary>
        public int? OsUsage { get; set; }
        /// <summary>The roles property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.RolesSummary? Roles { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.RolesSummary Roles { get; set; }
#endif
        /// <summary>The status property</summary>
        public global::Enhance.Client.Models.NetworkStatus? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.ServerInfo"/> and sets the default values.
        /// </summary>
        public ServerInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.ServerInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.ServerInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.ServerInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "controldVersion", n => { ControldVersion = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetStringValue(); } },
                { "dedicatedSubscription", n => { DedicatedSubscription = n.GetObjectValue<global::Enhance.Client.Models.DedicatedSubscriptionInfo>(global::Enhance.Client.Models.DedicatedSubscriptionInfo.CreateFromDiscriminatorValue); } },
                { "disks", n => { Disks = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.Disk>(global::Enhance.Client.Models.Disk.CreateFromDiscriminatorValue)?.AsList(); } },
                { "friendlyName", n => { FriendlyName = n.GetStringValue(); } },
                { "groupId", n => { GroupId = n.GetGuidValue(); } },
                { "hostname", n => { Hostname = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "ips", n => { Ips = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.ServerIp>(global::Enhance.Client.Models.ServerIp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "ipv6Addr", n => { Ipv6Addr = n.GetStringValue(); } },
                { "isConfigured", n => { IsConfigured = n.GetBoolValue(); } },
                { "isControlPanel", n => { IsControlPanel = n.GetBoolValue(); } },
                { "isDecommissioned", n => { IsDecommissioned = n.GetBoolValue(); } },
                { "osUsage", n => { OsUsage = n.GetIntValue(); } },
                { "roles", n => { Roles = n.GetObjectValue<global::Enhance.Client.Models.RolesSummary>(global::Enhance.Client.Models.RolesSummary.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::Enhance.Client.Models.NetworkStatus>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("controldVersion", ControldVersion);
            writer.WriteStringValue("createdAt", CreatedAt);
            writer.WriteObjectValue<global::Enhance.Client.Models.DedicatedSubscriptionInfo>("dedicatedSubscription", DedicatedSubscription);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.Disk>("disks", Disks);
            writer.WriteStringValue("friendlyName", FriendlyName);
            writer.WriteGuidValue("groupId", GroupId);
            writer.WriteStringValue("hostname", Hostname);
            writer.WriteGuidValue("id", Id);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.ServerIp>("ips", Ips);
            writer.WriteStringValue("ipv6Addr", Ipv6Addr);
            writer.WriteBoolValue("isConfigured", IsConfigured);
            writer.WriteBoolValue("isControlPanel", IsControlPanel);
            writer.WriteBoolValue("isDecommissioned", IsDecommissioned);
            writer.WriteIntValue("osUsage", OsUsage);
            writer.WriteObjectValue<global::Enhance.Client.Models.RolesSummary>("roles", Roles);
            writer.WriteEnumValue<global::Enhance.Client.Models.NetworkStatus>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
