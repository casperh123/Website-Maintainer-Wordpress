// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    /// <summary>
    /// Each Metrics entry represts an hourly window of banwidth usage Note: depending upon the polling time, most recent hour values might not      be complete yet and are subject to change if fetched at a later time.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class MetricsEntry : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The botHits property</summary>
        public double? BotHits { get; set; }
        /// <summary>The bytesReceived property</summary>
        public double? BytesReceived { get; set; }
        /// <summary>The bytesSent property</summary>
        public double? BytesSent { get; set; }
        /// <summary>Time at the beginning of the unit for this bandwidth consumption entry</summary>
        public DateTimeOffset? Datetime { get; set; }
        /// <summary>The totalHits property</summary>
        public double? TotalHits { get; set; }
        /// <summary>The uniqueHits property</summary>
        public double? UniqueHits { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.MetricsEntry"/> and sets the default values.
        /// </summary>
        public MetricsEntry()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.MetricsEntry"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.MetricsEntry CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.MetricsEntry();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "botHits", n => { BotHits = n.GetDoubleValue(); } },
                { "bytesReceived", n => { BytesReceived = n.GetDoubleValue(); } },
                { "bytesSent", n => { BytesSent = n.GetDoubleValue(); } },
                { "datetime", n => { Datetime = n.GetDateTimeOffsetValue(); } },
                { "totalHits", n => { TotalHits = n.GetDoubleValue(); } },
                { "uniqueHits", n => { UniqueHits = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("botHits", BotHits);
            writer.WriteDoubleValue("bytesReceived", BytesReceived);
            writer.WriteDoubleValue("bytesSent", BytesSent);
            writer.WriteDateTimeOffsetValue("datetime", Datetime);
            writer.WriteDoubleValue("totalHits", TotalHits);
            writer.WriteDoubleValue("uniqueHits", UniqueHits);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
