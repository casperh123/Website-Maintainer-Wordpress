// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    /// <summary>
    /// Settings for orchd login policy
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class OrchdLoginPolicySettings : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The emailAutoBlockDuration property</summary>
        public int? EmailAutoBlockDuration { get; set; }
        /// <summary>The emailAutoBlockEnabled property</summary>
        public bool? EmailAutoBlockEnabled { get; set; }
        /// <summary>The emailAutoBlockThreshold property</summary>
        public int? EmailAutoBlockThreshold { get; set; }
        /// <summary>The emailQuota property</summary>
        public int? EmailQuota { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The ipAutoBlockDuration property</summary>
        public int? IpAutoBlockDuration { get; set; }
        /// <summary>The ipAutoBlockEnabled property</summary>
        public bool? IpAutoBlockEnabled { get; set; }
        /// <summary>The ipAutoBlockThreshold property</summary>
        public int? IpAutoBlockThreshold { get; set; }
        /// <summary>The ipQuota property</summary>
        public int? IpQuota { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.OrchdLoginPolicySettings"/> and sets the default values.
        /// </summary>
        public OrchdLoginPolicySettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.OrchdLoginPolicySettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.OrchdLoginPolicySettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.OrchdLoginPolicySettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "emailAutoBlockDuration", n => { EmailAutoBlockDuration = n.GetIntValue(); } },
                { "emailAutoBlockEnabled", n => { EmailAutoBlockEnabled = n.GetBoolValue(); } },
                { "emailAutoBlockThreshold", n => { EmailAutoBlockThreshold = n.GetIntValue(); } },
                { "emailQuota", n => { EmailQuota = n.GetIntValue(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "ipAutoBlockDuration", n => { IpAutoBlockDuration = n.GetIntValue(); } },
                { "ipAutoBlockEnabled", n => { IpAutoBlockEnabled = n.GetBoolValue(); } },
                { "ipAutoBlockThreshold", n => { IpAutoBlockThreshold = n.GetIntValue(); } },
                { "ipQuota", n => { IpQuota = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("emailAutoBlockDuration", EmailAutoBlockDuration);
            writer.WriteBoolValue("emailAutoBlockEnabled", EmailAutoBlockEnabled);
            writer.WriteIntValue("emailAutoBlockThreshold", EmailAutoBlockThreshold);
            writer.WriteIntValue("emailQuota", EmailQuota);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteIntValue("ipAutoBlockDuration", IpAutoBlockDuration);
            writer.WriteBoolValue("ipAutoBlockEnabled", IpAutoBlockEnabled);
            writer.WriteIntValue("ipAutoBlockThreshold", IpAutoBlockThreshold);
            writer.WriteIntValue("ipQuota", IpQuota);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
