// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    /// <summary>
    /// A plan (or sometimes referred to as a package) defines a set of resources a reseller can offer for customer organizations to subscribe to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class Plan : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allowances property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.Allowance>? Allowances { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.Allowance> Allowances { get; set; }
#endif
        /// <summary>The allowedPhpVersions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.PhpVersion?>? AllowedPhpVersions { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.PhpVersion?> AllowedPhpVersions { get; set; }
#endif
        /// <summary>Whether the customer can select the server group for their websites.</summary>
        public bool? AllowServerGroupSelection { get; set; }
        /// <summary>The cgroupLimits property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.CgroupLimits? CgroupLimits { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.CgroupLimits CgroupLimits { get; set; }
#endif
        /// <summary>The createdAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>The defaultPhpVersion property</summary>
        public global::Enhance.Client.Models.PhpVersion? DefaultPhpVersion { get; set; }
        /// <summary>File system quota settings in bytes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.FsQuotaLimit? FsQuotaLimit { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.FsQuotaLimit FsQuotaLimit { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The orgId property</summary>
        public Guid? OrgId { get; set; }
        /// <summary>The planType property</summary>
        public global::Enhance.Client.Models.PlanType? PlanType { get; set; }
        /// <summary>:&gt; When WordPress is installed on a website under this plan, the chosen theme will be preinstalled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreinstallWordpressTheme { get; set; }
#nullable restore
#else
        public string PreinstallWordpressTheme { get; set; }
#endif
        /// <summary>The redisAllowed property</summary>
        public bool? RedisAllowed { get; set; }
        /// <summary>The resources property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.Resource>? Resources { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.Resource> Resources { get; set; }
#endif
        /// <summary>The selections property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.Selection>? Selections { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.Selection> Selections { get; set; }
#endif
        /// <summary>Use serverGroupIds instead</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServerGroupId { get; set; }
#nullable restore
#else
        public string ServerGroupId { get; set; }
#endif
        /// <summary>The serverGroupIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? ServerGroupIds { get; set; }
#nullable restore
#else
        public List<Guid?> ServerGroupIds { get; set; }
#endif
        /// <summary>The number of subscriptions to this plan.</summary>
        public int? SubscriptionsCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.Plan"/> and sets the default values.
        /// </summary>
        public Plan()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.Plan"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.Plan CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.Plan();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowServerGroupSelection", n => { AllowServerGroupSelection = n.GetBoolValue(); } },
                { "allowances", n => { Allowances = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.Allowance>(global::Enhance.Client.Models.Allowance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "allowedPhpVersions", n => { AllowedPhpVersions = n.GetCollectionOfEnumValues<global::Enhance.Client.Models.PhpVersion>()?.AsList(); } },
                { "cgroupLimits", n => { CgroupLimits = n.GetObjectValue<global::Enhance.Client.Models.CgroupLimits>(global::Enhance.Client.Models.CgroupLimits.CreateFromDiscriminatorValue); } },
                { "createdAt", n => { CreatedAt = n.GetStringValue(); } },
                { "defaultPhpVersion", n => { DefaultPhpVersion = n.GetEnumValue<global::Enhance.Client.Models.PhpVersion>(); } },
                { "fsQuotaLimit", n => { FsQuotaLimit = n.GetObjectValue<global::Enhance.Client.Models.FsQuotaLimit>(global::Enhance.Client.Models.FsQuotaLimit.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "orgId", n => { OrgId = n.GetGuidValue(); } },
                { "planType", n => { PlanType = n.GetEnumValue<global::Enhance.Client.Models.PlanType>(); } },
                { "preinstallWordpressTheme", n => { PreinstallWordpressTheme = n.GetStringValue(); } },
                { "redisAllowed", n => { RedisAllowed = n.GetBoolValue(); } },
                { "resources", n => { Resources = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.Resource>(global::Enhance.Client.Models.Resource.CreateFromDiscriminatorValue)?.AsList(); } },
                { "selections", n => { Selections = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.Selection>(global::Enhance.Client.Models.Selection.CreateFromDiscriminatorValue)?.AsList(); } },
                { "serverGroupId", n => { ServerGroupId = n.GetStringValue(); } },
                { "serverGroupIds", n => { ServerGroupIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "subscriptionsCount", n => { SubscriptionsCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.Allowance>("allowances", Allowances);
            writer.WriteCollectionOfEnumValues<global::Enhance.Client.Models.PhpVersion>("allowedPhpVersions", AllowedPhpVersions);
            writer.WriteBoolValue("allowServerGroupSelection", AllowServerGroupSelection);
            writer.WriteObjectValue<global::Enhance.Client.Models.CgroupLimits>("cgroupLimits", CgroupLimits);
            writer.WriteStringValue("createdAt", CreatedAt);
            writer.WriteEnumValue<global::Enhance.Client.Models.PhpVersion>("defaultPhpVersion", DefaultPhpVersion);
            writer.WriteObjectValue<global::Enhance.Client.Models.FsQuotaLimit>("fsQuotaLimit", FsQuotaLimit);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteGuidValue("orgId", OrgId);
            writer.WriteEnumValue<global::Enhance.Client.Models.PlanType>("planType", PlanType);
            writer.WriteStringValue("preinstallWordpressTheme", PreinstallWordpressTheme);
            writer.WriteBoolValue("redisAllowed", RedisAllowed);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.Resource>("resources", Resources);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.Selection>("selections", Selections);
            writer.WriteStringValue("serverGroupId", ServerGroupId);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("serverGroupIds", ServerGroupIds);
            writer.WriteIntValue("subscriptionsCount", SubscriptionsCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
