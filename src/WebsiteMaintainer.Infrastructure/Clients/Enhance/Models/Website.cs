// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Enhance.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class Website : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aliases property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.WebsiteDomain>? Aliases { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.WebsiteDomain> Aliases { get; set; }
#endif
        /// <summary>The id of the server on which this website is located.This is only returned when websites are queried recursively by an MO member, as the MO is in charge of servers and thus this information only concerns them.</summary>
        public Guid? AppServerId { get; set; }
        /// <summary>The appServerIpv6 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppServerIpv6 { get; set; }
#nullable restore
#else
        public string AppServerIpv6 { get; set; }
#endif
        /// <summary>The appServerName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppServerName { get; set; }
#nullable restore
#else
        public string AppServerName { get; set; }
#endif
        /// <summary>The id of the server on which the backups of this website are located.This is only returned when websites are queried recursively by an MO member, as the MO is in charge of servers and thus this information only concerns them.</summary>
        public Guid? BackupServerId { get; set; }
        /// <summary>The addresses of the the server on which this website&apos;s backups are located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.ServerIp>? BackupServerIps { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.ServerIp> BackupServerIps { get; set; }
#endif
        /// <summary>The backupServerName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackupServerName { get; set; }
#nullable restore
#else
        public string BackupServerName { get; set; }
#endif
        /// <summary>The canUse property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.CanUse? CanUse { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.CanUse CanUse { get; set; }
#endif
        /// <summary>The colorCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ColorCode { get; set; }
#nullable restore
#else
        public string ColorCode { get; set; }
#endif
        /// <summary>The date the site was first added</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>The id of the server on which the databases of this website are located.This is only returned when websites are queried recursively by an MO member, as the MO is in charge of servers and thus this information only concerns them.</summary>
        public Guid? DbServerId { get; set; }
        /// <summary>The addresses of the the server on which this website&apos;s databases are located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.ServerIp>? DbServerIps { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.ServerIp> DbServerIps { get; set; }
#endif
        /// <summary>The dbServerIpv6 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DbServerIpv6 { get; set; }
#nullable restore
#else
        public string DbServerIpv6 { get; set; }
#endif
        /// <summary>The dbServerName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DbServerName { get; set; }
#nullable restore
#else
        public string DbServerName { get; set; }
#endif
        /// <summary>The domain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Enhance.Client.Models.WebsiteDomain? Domain { get; set; }
#nullable restore
#else
        public global::Enhance.Client.Models.WebsiteDomain Domain { get; set; }
#endif
        /// <summary>The id of the server on which the emails of this website are located.This is only returned when websites are queried recursively by an MO member, as the MO is in charge of servers and thus this information only concerns them.</summary>
        public Guid? EmailServerId { get; set; }
        /// <summary>The addresses of the the server on which this website&apos;s emails are located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.ServerIp>? EmailServerIps { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.ServerIp> EmailServerIps { get; set; }
#endif
        /// <summary>The emailServerIpv6 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailServerIpv6 { get; set; }
#nullable restore
#else
        public string EmailServerIpv6 { get; set; }
#endif
        /// <summary>The emailServerName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailServerName { get; set; }
#nullable restore
#else
        public string EmailServerName { get; set; }
#endif
        /// <summary>The path relative to the control panel domain where filerd can be accessed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FilerdAddress { get; set; }
#nullable restore
#else
        public string FilerdAddress { get; set; }
#endif
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>The kind property</summary>
        public global::Enhance.Client.Models.WebsiteKind? Kind { get; set; }
        /// <summary>The org property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Org { get; set; }
#nullable restore
#else
        public string Org { get; set; }
#endif
        /// <summary>The orgId property</summary>
        public Guid? OrgId { get; set; }
        /// <summary>The parent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Parent { get; set; }
#nullable restore
#else
        public string Parent { get; set; }
#endif
        /// <summary>The parentId property</summary>
        public Guid? ParentId { get; set; }
        /// <summary>The pendingBackup property</summary>
        public global::Enhance.Client.Models.BackupAction? PendingBackup { get; set; }
        /// <summary>The phpVersion property</summary>
        public global::Enhance.Client.Models.PhpVersion? PhpVersion { get; set; }
        /// <summary>The plan property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Plan { get; set; }
#nullable restore
#else
        public string Plan { get; set; }
#endif
        /// <summary>The planId property</summary>
        public double? PlanId { get; set; }
        /// <summary>The addresses of the the server on which this website is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.ServerIp>? ServerIps { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.ServerIp> ServerIps { get; set; }
#endif
        /// <summary>The siteAccessMembers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.SiteAccessMember>? SiteAccessMembers { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.SiteAccessMember> SiteAccessMembers { get; set; }
#endif
        /// <summary>The size property</summary>
        public int? Size { get; set; }
        /// <summary>The status property</summary>
        public global::Enhance.Client.Models.WebsiteStatus? Status { get; set; }
        /// <summary>The subdomains property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Subdomains { get; set; }
#nullable restore
#else
        public UntypedNode Subdomains { get; set; }
#endif
        /// <summary>The subscriptionId property</summary>
        public double? SubscriptionId { get; set; }
        /// <summary>The suspendedBy property</summary>
        public Guid? SuspendedBy { get; set; }
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Enhance.Client.Models.Tag>? Tags { get; set; }
#nullable restore
#else
        public List<global::Enhance.Client.Models.Tag> Tags { get; set; }
#endif
        /// <summary>The unix user assigned to this website, used for ssh shells, prefixing website databases and databse users, etc.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnixUser { get; set; }
#nullable restore
#else
        public string UnixUser { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Models.Website"/> and sets the default values.
        /// </summary>
        public Website()
        {
            AdditionalData = new Dictionary<string, object>();
            Kind = global::Enhance.Client.Models.WebsiteKind.Normal;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.Website"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Enhance.Client.Models.Website CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Enhance.Client.Models.Website();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aliases", n => { Aliases = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.WebsiteDomain>(global::Enhance.Client.Models.WebsiteDomain.CreateFromDiscriminatorValue)?.AsList(); } },
                { "appServerId", n => { AppServerId = n.GetGuidValue(); } },
                { "appServerIpv6", n => { AppServerIpv6 = n.GetStringValue(); } },
                { "appServerName", n => { AppServerName = n.GetStringValue(); } },
                { "backupServerId", n => { BackupServerId = n.GetGuidValue(); } },
                { "backupServerIps", n => { BackupServerIps = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.ServerIp>(global::Enhance.Client.Models.ServerIp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "backupServerName", n => { BackupServerName = n.GetStringValue(); } },
                { "canUse", n => { CanUse = n.GetObjectValue<global::Enhance.Client.Models.CanUse>(global::Enhance.Client.Models.CanUse.CreateFromDiscriminatorValue); } },
                { "colorCode", n => { ColorCode = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetStringValue(); } },
                { "dbServerId", n => { DbServerId = n.GetGuidValue(); } },
                { "dbServerIps", n => { DbServerIps = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.ServerIp>(global::Enhance.Client.Models.ServerIp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "dbServerIpv6", n => { DbServerIpv6 = n.GetStringValue(); } },
                { "dbServerName", n => { DbServerName = n.GetStringValue(); } },
                { "domain", n => { Domain = n.GetObjectValue<global::Enhance.Client.Models.WebsiteDomain>(global::Enhance.Client.Models.WebsiteDomain.CreateFromDiscriminatorValue); } },
                { "emailServerId", n => { EmailServerId = n.GetGuidValue(); } },
                { "emailServerIps", n => { EmailServerIps = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.ServerIp>(global::Enhance.Client.Models.ServerIp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "emailServerIpv6", n => { EmailServerIpv6 = n.GetStringValue(); } },
                { "emailServerName", n => { EmailServerName = n.GetStringValue(); } },
                { "filerdAddress", n => { FilerdAddress = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "kind", n => { Kind = n.GetEnumValue<global::Enhance.Client.Models.WebsiteKind>(); } },
                { "org", n => { Org = n.GetStringValue(); } },
                { "orgId", n => { OrgId = n.GetGuidValue(); } },
                { "parent", n => { Parent = n.GetStringValue(); } },
                { "parentId", n => { ParentId = n.GetGuidValue(); } },
                { "pendingBackup", n => { PendingBackup = n.GetEnumValue<global::Enhance.Client.Models.BackupAction>(); } },
                { "phpVersion", n => { PhpVersion = n.GetEnumValue<global::Enhance.Client.Models.PhpVersion>(); } },
                { "plan", n => { Plan = n.GetStringValue(); } },
                { "planId", n => { PlanId = n.GetDoubleValue(); } },
                { "serverIps", n => { ServerIps = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.ServerIp>(global::Enhance.Client.Models.ServerIp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "siteAccessMembers", n => { SiteAccessMembers = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.SiteAccessMember>(global::Enhance.Client.Models.SiteAccessMember.CreateFromDiscriminatorValue)?.AsList(); } },
                { "size", n => { Size = n.GetIntValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Enhance.Client.Models.WebsiteStatus>(); } },
                { "subdomains", n => { Subdomains = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "subscriptionId", n => { SubscriptionId = n.GetDoubleValue(); } },
                { "suspendedBy", n => { SuspendedBy = n.GetGuidValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfObjectValues<global::Enhance.Client.Models.Tag>(global::Enhance.Client.Models.Tag.CreateFromDiscriminatorValue)?.AsList(); } },
                { "unixUser", n => { UnixUser = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.WebsiteDomain>("aliases", Aliases);
            writer.WriteGuidValue("appServerId", AppServerId);
            writer.WriteStringValue("appServerIpv6", AppServerIpv6);
            writer.WriteStringValue("appServerName", AppServerName);
            writer.WriteGuidValue("backupServerId", BackupServerId);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.ServerIp>("backupServerIps", BackupServerIps);
            writer.WriteStringValue("backupServerName", BackupServerName);
            writer.WriteObjectValue<global::Enhance.Client.Models.CanUse>("canUse", CanUse);
            writer.WriteStringValue("colorCode", ColorCode);
            writer.WriteStringValue("createdAt", CreatedAt);
            writer.WriteGuidValue("dbServerId", DbServerId);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.ServerIp>("dbServerIps", DbServerIps);
            writer.WriteStringValue("dbServerIpv6", DbServerIpv6);
            writer.WriteStringValue("dbServerName", DbServerName);
            writer.WriteObjectValue<global::Enhance.Client.Models.WebsiteDomain>("domain", Domain);
            writer.WriteGuidValue("emailServerId", EmailServerId);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.ServerIp>("emailServerIps", EmailServerIps);
            writer.WriteStringValue("emailServerIpv6", EmailServerIpv6);
            writer.WriteStringValue("emailServerName", EmailServerName);
            writer.WriteStringValue("filerdAddress", FilerdAddress);
            writer.WriteGuidValue("id", Id);
            writer.WriteEnumValue<global::Enhance.Client.Models.WebsiteKind>("kind", Kind);
            writer.WriteStringValue("org", Org);
            writer.WriteGuidValue("orgId", OrgId);
            writer.WriteStringValue("parent", Parent);
            writer.WriteGuidValue("parentId", ParentId);
            writer.WriteEnumValue<global::Enhance.Client.Models.BackupAction>("pendingBackup", PendingBackup);
            writer.WriteEnumValue<global::Enhance.Client.Models.PhpVersion>("phpVersion", PhpVersion);
            writer.WriteStringValue("plan", Plan);
            writer.WriteDoubleValue("planId", PlanId);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.ServerIp>("serverIps", ServerIps);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.SiteAccessMember>("siteAccessMembers", SiteAccessMembers);
            writer.WriteIntValue("size", Size);
            writer.WriteEnumValue<global::Enhance.Client.Models.WebsiteStatus>("status", Status);
            writer.WriteObjectValue<UntypedNode>("subdomains", Subdomains);
            writer.WriteDoubleValue("subscriptionId", SubscriptionId);
            writer.WriteGuidValue("suspendedBy", SuspendedBy);
            writer.WriteCollectionOfObjectValues<global::Enhance.Client.Models.Tag>("tags", Tags);
            writer.WriteStringValue("unixUser", UnixUser);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
