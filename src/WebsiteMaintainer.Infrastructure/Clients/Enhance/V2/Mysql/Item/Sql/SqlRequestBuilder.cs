// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.V2.Mysql.Item.Sql
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\mysql\{db_id}\sql
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class SqlRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.V2.Mysql.Item.Sql.SqlRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SqlRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/mysql/{db_id}/sql{?force*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.V2.Mysql.Item.Sql.SqlRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SqlRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/mysql/{db_id}/sql{?force*}", rawUrl)
        {
        }
        /// <summary>
        /// Uploads an sql file which is then executed against given db. Allowed file types are &apos;.sql&apos;, &apos;.gz&apos; and &apos;.zip&apos;. The gzip-ed file must be a valid sql. The zip archive may contain only one &apos;.sql&apos; file, however the file can be within a directory.If the force flag is set to true (default is false), the SQL execution will not stop when an error is raised (corresponds to the --force option of mysql cli).The max allowed size is 500 MB.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PostAsync(global::Enhance.Client.Models.SqlFile body, Action<RequestConfiguration<global::Enhance.Client.V2.Mysql.Item.Sql.SqlRequestBuilder.SqlRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PostAsync(global::Enhance.Client.Models.SqlFile body, Action<RequestConfiguration<global::Enhance.Client.V2.Mysql.Item.Sql.SqlRequestBuilder.SqlRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Uploads an sql file which is then executed against given db. Allowed file types are &apos;.sql&apos;, &apos;.gz&apos; and &apos;.zip&apos;. The gzip-ed file must be a valid sql. The zip archive may contain only one &apos;.sql&apos; file, however the file can be within a directory.If the force flag is set to true (default is false), the SQL execution will not stop when an error is raised (corresponds to the --force option of mysql cli).The max allowed size is 500 MB.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.SqlFile body, Action<RequestConfiguration<global::Enhance.Client.V2.Mysql.Item.Sql.SqlRequestBuilder.SqlRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Enhance.Client.Models.SqlFile body, Action<RequestConfiguration<global::Enhance.Client.V2.Mysql.Item.Sql.SqlRequestBuilder.SqlRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "multipart/form-data", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.V2.Mysql.Item.Sql.SqlRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.V2.Mysql.Item.Sql.SqlRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.V2.Mysql.Item.Sql.SqlRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Uploads an sql file which is then executed against given db. Allowed file types are &apos;.sql&apos;, &apos;.gz&apos; and &apos;.zip&apos;. The gzip-ed file must be a valid sql. The zip archive may contain only one &apos;.sql&apos; file, however the file can be within a directory.If the force flag is set to true (default is false), the SQL execution will not stop when an error is raised (corresponds to the --force option of mysql cli).The max allowed size is 500 MB.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class SqlRequestBuilderPostQueryParameters 
        {
            [QueryParameter("force")]
            public bool? Force { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class SqlRequestBuilderPostRequestConfiguration : RequestConfiguration<global::Enhance.Client.V2.Mysql.Item.Sql.SqlRequestBuilder.SqlRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
