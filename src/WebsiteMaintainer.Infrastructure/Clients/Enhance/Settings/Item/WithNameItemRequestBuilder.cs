// <auto-generated/>
#pragma warning disable CS0618
using Enhance.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Enhance.Client.Settings.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\{name}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class WithNameItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithNameItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/{name}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithNameItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/{name}", rawUrl)
        {
        }
        /// <summary>
        /// Remove the specified setting
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the specified setting
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Models.Setting"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Enhance.Client.Models.Setting?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Enhance.Client.Models.Setting> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Enhance.Client.Models.Setting>(requestInfo, global::Enhance.Client.Models.Setting.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create or update the specified setting
        /// </summary>
        /// <param name="body">An arbitrary JSON serializable value.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PutAsync(global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder.WithNamePutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PutAsync(global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder.WithNamePutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Remove the specified setting
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Get the specified setting
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create or update the specified setting
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">An arbitrary JSON serializable value.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder.WithNamePutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder.WithNamePutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithNameItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithNameItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithNameItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="bool"/>, <see cref="double"/>, <see cref="global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember1"/>, <see cref="global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember2"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        public partial class WithNamePutRequestBody : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="bool"/></summary>
            public bool? Boolean { get; set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double { get; set; }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="bool"/></summary>
            public bool? WithNamePutRequestBodyBoolean { get; set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? WithNamePutRequestBodyDouble { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember1? WithNamePutRequestBodyMember1 { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember1 WithNamePutRequestBodyMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember2? WithNamePutRequestBodyMember2 { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember2 WithNamePutRequestBodyMember2 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? WithNamePutRequestBodyString { get; set; }
#nullable restore
#else
            public string WithNamePutRequestBodyString { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember1? WithNamePutRequestBodyWithNamePutRequestBodyMember1 { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember1 WithNamePutRequestBodyWithNamePutRequestBodyMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember2? WithNamePutRequestBodyWithNamePutRequestBodyMember2 { get; set; }
#nullable restore
#else
            public global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember2 WithNamePutRequestBodyWithNamePutRequestBodyMember2 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder.WithNamePutRequestBody"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder.WithNamePutRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Enhance.Client.Settings.Item.WithNameItemRequestBuilder.WithNamePutRequestBody();
                if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.WithNamePutRequestBodyMember1 = new global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember1();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.WithNamePutRequestBodyMember2 = new global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember2();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.WithNamePutRequestBodyWithNamePutRequestBodyMember1 = new global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember1();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.WithNamePutRequestBodyWithNamePutRequestBodyMember2 = new global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember2();
                }
                else if(parseNode.GetBoolValue() is bool booleanValue)
                {
                    result.Boolean = booleanValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else if(parseNode.GetBoolValue() is bool withNamePutRequestBodyBooleanValue)
                {
                    result.WithNamePutRequestBodyBoolean = withNamePutRequestBodyBooleanValue;
                }
                else if(parseNode.GetDoubleValue() is double withNamePutRequestBodyDoubleValue)
                {
                    result.WithNamePutRequestBodyDouble = withNamePutRequestBodyDoubleValue;
                }
                else if(parseNode.GetStringValue() is string withNamePutRequestBodyStringValue)
                {
                    result.WithNamePutRequestBodyString = withNamePutRequestBodyStringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(WithNamePutRequestBodyMember1 != null)
                {
                    return WithNamePutRequestBodyMember1.GetFieldDeserializers();
                }
                else if(WithNamePutRequestBodyMember2 != null)
                {
                    return WithNamePutRequestBodyMember2.GetFieldDeserializers();
                }
                else if(WithNamePutRequestBodyWithNamePutRequestBodyMember1 != null)
                {
                    return WithNamePutRequestBodyWithNamePutRequestBodyMember1.GetFieldDeserializers();
                }
                else if(WithNamePutRequestBodyWithNamePutRequestBodyMember2 != null)
                {
                    return WithNamePutRequestBodyWithNamePutRequestBodyMember2.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(WithNamePutRequestBodyMember1 != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember1>(null, WithNamePutRequestBodyMember1);
                }
                else if(WithNamePutRequestBodyMember2 != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember2>(null, WithNamePutRequestBodyMember2);
                }
                else if(WithNamePutRequestBodyWithNamePutRequestBodyMember1 != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember1>(null, WithNamePutRequestBodyWithNamePutRequestBodyMember1);
                }
                else if(WithNamePutRequestBodyWithNamePutRequestBodyMember2 != null)
                {
                    writer.WriteObjectValue<global::Enhance.Client.Settings.Item.WithNamePutRequestBodyMember2>(null, WithNamePutRequestBodyWithNamePutRequestBodyMember2);
                }
                else if(Boolean != null)
                {
                    writer.WriteBoolValue(null, Boolean);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else if(WithNamePutRequestBodyBoolean != null)
                {
                    writer.WriteBoolValue(null, WithNamePutRequestBodyBoolean);
                }
                else if(WithNamePutRequestBodyDouble != null)
                {
                    writer.WriteDoubleValue(null, WithNamePutRequestBodyDouble);
                }
                else if(WithNamePutRequestBodyString != null)
                {
                    writer.WriteStringValue(null, WithNamePutRequestBodyString);
                }
            }
        }
    }
}
#pragma warning restore CS0618
